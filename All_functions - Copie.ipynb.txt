{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.cluster import DBSCAN\n",
    "\n",
    "pd.options.display.float_format = '{:,.2f}'.format\n",
    "\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Read and merge data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# You sort thanks to the predictions and the row order\n",
    "# Then you calculate the giniSum on actual values in the order just defined above\n",
    "# To normalize you compare this previous result to the same done in the \"actual values\" order instead of predictions values\n",
    "\n",
    "def gini(actual, pred):\n",
    "    assert (len(actual) == len(pred)) # Check params\n",
    "    all = np.asarray(np.c_[actual, pred, np.arange(len(actual))], dtype=np.float)\n",
    "    all = all[np.lexsort((all[:, 2], -1 * all[:, 1]))]\n",
    "    totalLosses = all[:, 0].sum()\n",
    "    giniSum = all[:, 0].cumsum().sum() / totalLosses\n",
    "\n",
    "    giniSum -= (len(actual) + 1) / 2.\n",
    "    return giniSum / len(actual)\n",
    "\n",
    "\n",
    "def gini_normalized(actual, pred):\n",
    "    return gini(actual, pred) / gini(actual, actual)\n",
    "\n",
    "\n",
    "# evaluate the model gini normalized score\n",
    "def get_gini_score(model, X_test):\n",
    "    model_pred = model.predict_proba(X_test)[:,1] \n",
    "    return gini_normalized(y_test.target, model_pred)\n",
    "     \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Strat reading the Generali data\n",
    "def read_generali_data():\n",
    "    train = pd.read_csv(\"./X_train.csv\")\n",
    "    test = pd.read_csv(\"./X_test.csv\")\n",
    "    y_train = pd.read_csv(\"./y_train_saegPGl.csv\")\n",
    "    del train[\"Unnamed: 0\"]\n",
    "    del test[\"Unnamed: 0\"]\n",
    "    \n",
    "    del train[\"Identifiant\"]\n",
    "    del test[\"Identifiant\"]\n",
    "    \n",
    "    return [train, test, y_train]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transform and create features with category\n",
    "def dummies(train, test, columns = None):\n",
    "    if columns != None:\n",
    "        for column in columns:\n",
    "            train[column] = train[column].apply(lambda x: str(x))\n",
    "            test[column] = test[column].apply(lambda x: str(x))\n",
    "            good_cols = [column+'_'+i for i in train[column].unique() if i in test[column].unique()]\n",
    "            train = pd.concat((train, pd.get_dummies(train[column], prefix = column)[good_cols]), axis = 1)\n",
    "            test = pd.concat((test, pd.get_dummies(test[column], prefix = column)[good_cols]), axis = 1)\n",
    "            del train[column]\n",
    "            del test[column]\n",
    "    return train, test\n",
    "\n",
    "\n",
    "def transform_to_dummies(train, train_dummies):    \n",
    "    # Define categ column list\n",
    "    categ_col_list = [col for col in train.columns if 'categ' in col]\n",
    "    categ_col_list.remove(\"ft_22_categ\")\n",
    "    train[\"ft_24_categ\"] = train[\"ft_24_categ\"].str.replace(\" \",\"\")\n",
    "\n",
    "    # Define a categ type column list to transform with dummies values\n",
    "    categ_col_list = [col for col in train.columns if 'categ' in col]\n",
    "    categ_col_list.remove(\"ft_22_categ\")\n",
    "\n",
    "    train[\"ft_24_categ\"] = train[\"ft_24_categ\"].str.replace(\" \",\"\")\n",
    "    \n",
    "    \n",
    "    return train_dummies\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to impute NaN values on features : ft_22_categ, superficief, insee\n",
    "#\n",
    "# train_dummies : dataframe to complete and return\n",
    "# n_knn : number of neighbors to build a KNN predictor\n",
    "#         if a model is already built and passed to the function --> set knn_22|knn_superficie|knn_Insee and n_knn to 0\n",
    "\n",
    "def impute_categ_knn(train_dummies, n_knn=0, knn_22=None, knn_superficie=None, knn_Insee=None):\n",
    "    \n",
    "    #################################################\n",
    "    # \n",
    "    # Get columns having null values\n",
    "    ft_22_categ = train_dummies[\"ft_22_categ\"].copy()\n",
    "    superficief = train_dummies[\"superficief\"].copy()\n",
    "    insee = train_dummies[\"Insee\"].copy()\n",
    "\n",
    "    # Get index for each column null values\n",
    "    ft_22_categ_null_idx = train_dummies[\"ft_22_categ\"].isnull()\n",
    "    superficief_null_idx = train_dummies[\"superficief\"].isnull()\n",
    "    Insee_null_idx = train_dummies[\"Insee\"].isnull()\n",
    "\n",
    "    # Delete columns having null values before imputing values\n",
    "    del  train_dummies[\"ft_22_categ\"]\n",
    "    del  train_dummies[\"superficief\"]\n",
    "    del  train_dummies[\"Insee\"]\n",
    "\n",
    "    # Fix Expo column type\n",
    "    train_dummies[\"EXPO\"] = train_dummies[\"EXPO\"].str.replace(\",\",\".\").astype(float)\n",
    "    \n",
    "    \n",
    "    #################################################\n",
    "    # \n",
    "    # Let's try with KNN & 3 neighbors\n",
    "    # Use k=3 by default --> improve with CV this hyper parameter\n",
    "    if n_knn!=0:\n",
    "        knn_22 = KNeighborsClassifier(n_neighbors= n_knn)\n",
    "        knn_superficie = KNeighborsClassifier(n_neighbors= n_knn)\n",
    "        knn_Insee = KNeighborsClassifier(n_neighbors= n_knn)\n",
    "\n",
    "        # predict ft_22_categ null values\n",
    "        knn_22.fit(  train_dummies.loc[(ft_22_categ_null_idx==False),\"EXPO\":],  ft_22_categ[(ft_22_categ_null_idx==False)]  )\n",
    "        pred_ft_22_categ = knn_22.predict(train_dummies.loc[ft_22_categ_null_idx,\"EXPO\":])\n",
    "\n",
    "        # predict superficief_null_idx null values\n",
    "        knn_superficie.fit(  train_dummies.loc[(superficief_null_idx==False),\"EXPO\":],  superficief[(superficief_null_idx==False)]  )\n",
    "        pred_superficief = knn_superficie.predict(train_dummies.loc[superficief_null_idx,\"EXPO\":])\n",
    "\n",
    "        # predict Insee_null_idx null values \n",
    "        knn_Insee.fit(  train_dummies.loc[(Insee_null_idx==False),\"EXPO\":],  insee[(Insee_null_idx==False)]  )\n",
    "        pred_Insee = knn_Insee.predict(train_dummies.loc[Insee_null_idx,\"EXPO\":])\n",
    "\n",
    "    else : # We impute here the test dataframe with train knn model\n",
    "        pred_ft_22_categ = knn_22.predict(train_dummies.loc[ft_22_categ_null_idx,\"EXPO\":])\n",
    "\n",
    "        # predict superficief_null_idx null values\n",
    "        pred_superficief = knn_superficie.predict(train_dummies.loc[superficief_null_idx,\"EXPO\":])\n",
    "\n",
    "        # predict Insee_null_idx null values \n",
    "        pred_Insee = knn_Insee.predict(train_dummies.loc[Insee_null_idx,\"EXPO\":])\n",
    "\n",
    "        \n",
    "    # Concat all resulting rows\n",
    "    ft_22_categ[ft_22_categ_null_idx] = pred_ft_22_categ.tolist().copy()\n",
    "    superficief[superficief_null_idx] = pred_superficief.tolist().copy()  \n",
    "    insee[Insee_null_idx] = pred_Insee.tolist().copy() \n",
    "\n",
    "    # Integrate all the 3 columns into the \"train_dummies\" dataframe\n",
    "    train_dummies = pd.concat( (train_dummies, ft_22_categ, superficief, insee ) , axis=1)\n",
    "    if n_knn!=0:\n",
    "        return train_dummies, knn_22, knn_superficie, knn_Insee\n",
    "    else :\n",
    "        return train_dummies\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate a given Month exposure\n",
    "def set_month_dummies(row):\n",
    "        \n",
    "    for c_month_nb in range(1,13):\n",
    "        # Get month exposed from the end of the year\n",
    "        if c_month_nb/12  <= row[\"EXPO\"]:\n",
    "            row['Is_Exposed_M_'+str(12-c_month_nb+1)] = 1\n",
    "    return row    \n",
    "\n",
    "def create_features(df, original_df):\n",
    "    # Before encoding the year of contract build the Age feature\n",
    "    # linking ft_2_categ and ft_22_categ features\n",
    "    df[\"Age\"] = original_df[\"ft_2_categ\"].astype(int) - df[\"ft_22_categ\"] # We call back original df because ft_2_categ has been removed during \"dumization\"\n",
    "    \n",
    "    # First create 12 features \n",
    "    monthFeaturesList = ['Is_Exposed_M_'+str(x) for x in range(1, 13)]\n",
    "    \n",
    "    # Add the new columns into the train_dummies dataframe\n",
    "    df_months = pd.DataFrame(index=range(0,df.shape[0]), columns=monthFeaturesList)\n",
    "    df_months = df_months.fillna(0)\n",
    "    df = pd.concat((df, df_months), axis = 1)\n",
    "    \n",
    "    # Affect \"Month Exposure\" dummy values\n",
    "    df = df.apply(set_month_dummies, axis=1)\n",
    "    return df\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Collect more data to look for signal coming from the social area parameters\n",
    "# Function to read social data and encode some features\n",
    "def read_commune_social_data():\n",
    "    commune_df = pd.read_excel(\"./MDB-INSEE-V2.xls\")\n",
    "    \n",
    "    # Fill all columns having only one null value with the mode \n",
    "    one_null_col_list = commune_df.columns[commune_df.isnull().sum()==1]\n",
    "    commune_df.loc[:, one_null_col_list] = commune_df.loc[:, one_null_col_list].apply(lambda x:x.fillna(x.value_counts().index[0]))\n",
    "\n",
    "    # Deal with all other incomplete columns and impute them with mean values\n",
    "    null_col_list = commune_df.columns[commune_df.isnull().sum()>0]\n",
    "    commune_df.loc[:, null_col_list] = commune_df.loc[:, null_col_list].apply(lambda x:x.fillna(x.mean()))\n",
    "\n",
    "    # Initialize commune_df_dummies with quatitative features\n",
    "    commune_df_dummies = commune_df.select_dtypes(exclude=[object])\n",
    "\n",
    "    # Then complete encoding categorical features selected\n",
    "    for column in [\"Orientation Economique\", \"Urbanité Ruralité\"]:\n",
    "        commune_df[column] = commune_df[column].apply(lambda x: str(x).rstrip().replace(\" \",\"\"))\n",
    "        new_cols = [column+'_'+i for i in commune_df[column].unique()]\n",
    "        commune_df_dummies = pd.concat((commune_df_dummies, pd.get_dummies(commune_df[column], prefix = column)[new_cols]), axis = 1)\n",
    "\n",
    "    commune_df_dummies = pd.concat((commune_df[\"CODGEO\"], commune_df_dummies), axis = 1)\n",
    "\n",
    "    return commune_df_dummies\n",
    "\n",
    "\n",
    "def create_commune_data(train_complete_df):\n",
    "    train_complete_df[\"Pop_rate_per_Menage\"] = train_complete_df[\"Population\"] / train_complete_df[\"Nb Ménages\"]\n",
    "    train_complete_df[\"Pop_rate_Logement\"] = train_complete_df[\"Population\"] / train_complete_df[\"Nb Logement\"]\n",
    "    train_complete_df[\"Fem_per_Hom\"] = train_complete_df[\"Nb Femme\"] / train_complete_df[\"Nb Homme\"]\n",
    "\n",
    "    train_complete_df[\"Hom_rate\"] = train_complete_df[\"Nb Homme\"] / train_complete_df[\"Population\"]\n",
    "    train_complete_df[\"Etu_rate\"] = train_complete_df[\"Nb Etudiants\"] / train_complete_df[\"Population\"]\n",
    "    train_complete_df[\"Com_per_Pop\"] = train_complete_df[\"Nb de Commerce\"] / train_complete_df[\"Population\"]\n",
    "\n",
    "    train_complete_df[\"Actifs_rate\"] = train_complete_df[\"Nb Actifs Salariés\"] / train_complete_df[\"Population\"]\n",
    "    train_complete_df[\"Camp_Travel_rate\"] = train_complete_df[\"Capacité Camping\"] / train_complete_df[\"Population\"]\n",
    "\n",
    "    train_complete_df[\"Travel_rate\"] = (train_complete_df[\"Capacité Hotel\"] + train_complete_df[\"Capacité Camping\"]) / train_complete_df[\"Population\"]\n",
    "\n",
    "    train_complete_df[\"Crea_Entrp_per_Pop\"] = train_complete_df[\"Nb Création Enteprises\"] / train_complete_df[\"Population\"]\n",
    "\n",
    "    train_complete_df[\"MSH_DpR\"] = train_complete_df[\"Dep Moyenne Salaires Horaires\"] / train_complete_df[\"Reg Moyenne Salaires Horaires\"] \n",
    "    train_complete_df[\"MSCH_DpR\"] = train_complete_df[\"Dep Moyenne Salaires Cadre Horaires\"] / train_complete_df[\"Reg Moyenne Salaires Cadre Horaires\"] \n",
    "    train_complete_df[\"MSPIH_DpR\"] = train_complete_df[\"Dep Moyenne Salaires Prof Intermédiaire Horaires\"] / train_complete_df[\"Reg Moyenne Salaires Prof Intermédiaire Horaires\"]\n",
    "    train_complete_df[\"MSEH_DpR\"] = train_complete_df[\"Dep Moyenne Salaires Employé Horaires\"] / train_complete_df[\"Reg Moyenne Salaires Employé Horaires\"]\n",
    "    train_complete_df[\"MSOH_DpR\"] = train_complete_df[\"Dep Moyenne Salaires Ouvrié Horaires\"] / train_complete_df[\"Reg Moyenne Salaires Ouvrié Horaires\"]\n",
    "\n",
    "    return train_complete_df\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Impute NaN values with KNN predictor\n",
    "# If k_nn is set to 0 set knn_class_list|knn_class_codgeo|knn_reg_list\n",
    "def impute_commune_NaN(train_complete_df, n_knn=0, knn_class_list=None, knn_class_codgeo=None, knn_reg_list=None):\n",
    "    \n",
    "    \n",
    "    # Manage variables\n",
    "    if n_knn!=0:\n",
    "        knn_class_list = list()\n",
    "        knn_reg_list = list()\n",
    "    \n",
    "    #######################################################################################\n",
    "    # DEFINE Column type (binary or quantitative)\n",
    "    \n",
    "    # Define binary columns to apply knn classifiers on\n",
    "    boolean_col_mask = [len(train_complete_df[x].fillna(0).unique())<=2 for x in train_complete_df.columns]\n",
    "    boolean_cols = train_complete_df.columns[boolean_col_mask]\n",
    "    # Filter out columns without any Null Values\n",
    "    boolean_cols = boolean_cols[train_complete_df[boolean_cols].isnull().sum()>0]\n",
    "\n",
    "    # Not boolean ones for regressors\n",
    "    not_boolean_col_mask = list(map(lambda item: not item, boolean_col_mask))\n",
    "    not_boolean_cols = train_complete_df.columns[not_boolean_col_mask]\n",
    "    # Filter out columns without any Null Values\n",
    "    not_boolean_cols = not_boolean_cols[train_complete_df[not_boolean_cols].isnull().sum()>0]\n",
    "\n",
    "\n",
    "    ########################################################################################\n",
    "    # Fill Na for all binary factor columns with knn classifier\n",
    "    # We fill \"Commune\" data that has not been merged because \n",
    "    # the original dataset has no CODGEO data recorded so no index to join to \"Commune\" data\n",
    "\n",
    "    # For each boolean cols, impute NaN with a Classifier  \n",
    "    cursor_i = 0\n",
    "    for boolean_col in boolean_cols:  \n",
    "        print(boolean_col)\n",
    "    \n",
    "        # Define mask for rows having NaN\n",
    "        col_null_idx = train_complete_df[boolean_col].isnull()\n",
    "    \n",
    "        if n_knn!=0:\n",
    "            knn_class = KNeighborsClassifier(n_neighbors=n_knn)  \n",
    "            # Fit model on rows having CODGEO, then predict on col with null CODGEO values\n",
    "            knn_class.fit(  train_complete_df.loc[(col_null_idx==False), \"EXPO\":\"superficief\"],  train_complete_df.loc[(col_null_idx==False), boolean_col]  )\n",
    "            knn_class_list.append(knn_class)\n",
    "            \n",
    "        pred = knn_class_list[cursor_i].predict(train_complete_df.loc[col_null_idx, \"EXPO\":\"superficief\"])\n",
    "        \n",
    "        # Concat all resulting rows\n",
    "        train_complete_df.loc[col_null_idx, boolean_col] = pred.tolist().copy()\n",
    "        cursor_i = cursor_i + 1\n",
    "\n",
    "        \n",
    "    # Manage NaN for CODGEO\n",
    "    col = \"CODGEO\"\n",
    "    col_null_idx = train_complete_df.CODGEO.isnull()\n",
    "\n",
    "    # Once again we use here KNN to fill na\n",
    "    if n_knn!=0:\n",
    "        knn_class_codgeo = KNeighborsClassifier(n_neighbors=n_knn)\n",
    "        knn_class_codgeo.fit(  train_complete_df.loc[(col_null_idx==False), \"EXPO\":\"superficief\" ],  train_complete_df.loc[(col_null_idx==False), col]  )\n",
    "    \n",
    "    # predict current col null values\n",
    "    pred = knn_class_codgeo.predict(train_complete_df.loc[col_null_idx,\"EXPO\":\"superficief\"])\n",
    "\n",
    "    # Concat all resulting rows\n",
    "    train_complete_df.loc[col_null_idx,col] = pred.tolist().copy()\n",
    "    \n",
    "    # Remove CODGEO from the Not Boolean feature list as it is a categorical feature indeed\n",
    "    not_boolean_col_list = not_boolean_cols.tolist()\n",
    "    CODGEO_idx = not_boolean_col_list.index(\"CODGEO\")\n",
    "    not_boolean_col_list.pop(CODGEO_idx)\n",
    "    not_boolean_cols = not_boolean_col_list\n",
    "    \n",
    "    \n",
    "    ####################################################\n",
    "    # Impute all quantitative features\n",
    "    \n",
    "    cursor_i = 0\n",
    "    # For each boolean cols, impute NaN with a Classifier  \n",
    "    for not_boolean_col in not_boolean_cols:  \n",
    "        \n",
    "        # Define mask for rows having NaN\n",
    "        col_null_idx = train_complete_df[not_boolean_col].isnull()\n",
    "    \n",
    "        # Fit model on rows having CODGEO, then predict on col with null CODGEO values\n",
    "        if n_knn !=0:\n",
    "            knn_reg = KNeighborsRegressor(n_neighbors=n_knn)\n",
    "            knn_reg.fit(  train_complete_df.loc[(col_null_idx==False), \"EXPO\":\"superficief\"],  train_complete_df.loc[(col_null_idx==False), not_boolean_col]  )\n",
    "            knn_reg_list.append(knn_reg)\n",
    "        pred = knn_reg_list[cursor_i].predict(train_complete_df.loc[col_null_idx, \"EXPO\":\"superficief\"])\n",
    "        \n",
    "        # Concat all resulting rows\n",
    "        train_complete_df.loc[col_null_idx, not_boolean_col] = pred.tolist().copy()\n",
    "        cursor_i = cursor_i + 1\n",
    "    \n",
    "    if n_knn != 0:\n",
    "    \n",
    "        return train_complete_df, knn_class_list, knn_class_codgeo, knn_reg_list\n",
    "    \n",
    "    else : # Return test dataframe\n",
    "    \n",
    "        return train_complete_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Collect more data to look for signal coming from the local natural sinistrality\n",
    "# Function to read natural risk data \n",
    "def add_ONRN_data(train_complete_df):\n",
    "    \n",
    "    # 1 : Get all data related to population or ground exposition\n",
    "    RGA_FM_df = pd.read_excel(\"./Indicateur Nb maisons RGA FM.xlsx\")\n",
    "    RGA_FM_df.rename({'Nb de maisons individuelles exposées à l’aléa RGA fort ou moyen':'NB_RGA_FM'}, axis='columns', inplace=True)\n",
    "    train_complete_df = train_complete_df.merge(RGA_FM_df, how='left', left_on='Insee', right_on='INSEE', right_index=False)\n",
    "    # fill with na commune with 0 --> no data means no house in the RGA FM\n",
    "    train_complete_df.fillna(0, inplace=True)\n",
    "    del train_complete_df[\"INSEE\"]\n",
    "    \n",
    "    EAIP_CE_df = pd.read_excel(\"./Indicateur Population EAIP CE.xls\")\n",
    "    EAIP_CE_df.rename({\"Population dans EAIP CE\":\"Pop_EAIP_CE\"}, axis='columns', inplace=True)\n",
    "    train_complete_df = train_complete_df.merge(EAIP_CE_df[[\"INSEE_COM\",\"Pop_EAIP_CE\"]], how='left', left_on='Insee', right_on='INSEE_COM', right_index=False)\n",
    "    train_complete_df.fillna(0, inplace=True)\n",
    "    del train_complete_df[\"INSEE_COM\"]\n",
    "    \n",
    "    EAIP_SM_df = pd.read_excel(\"./Indicateur Population EAIP SM.xls\")\n",
    "    EAIP_SM_df.rename({\"Population dans EAIP SM\":\"Pop_EAIP_SM\"}, axis='columns', inplace=True)\n",
    "    train_complete_df = train_complete_df.merge(EAIP_SM_df[[\"INSEE_COM\",\"Pop_EAIP_SM\"]], how='left', left_on='Insee', right_on='INSEE_COM', right_index=False)\n",
    "    # Fill Na with 0 considering there is no EAIP_SM\n",
    "    train_complete_df.fillna(0, inplace=True)\n",
    "    del train_complete_df[\"INSEE_COM\"]\n",
    "    \n",
    "    MVT_TERRAIN_df = pd.read_excel(\"Indicateur Nombre et types de mouvements de terrain.xls\")\n",
    "    train_complete_df = train_complete_df.merge(MVT_TERRAIN_df[[\"INSEE_COM\",\"Total\",\"Gliss\",\"Bloc\",\"Coul\",\"Eff\",\"Eros\"]], how='left', left_on='Insee', right_on='INSEE_COM', right_index=False)\n",
    "    train_complete_df.fillna(0, inplace=True)\n",
    "    del train_complete_df[\"INSEE_COM\"]\n",
    "    \n",
    "    Indensite_Macrosismique_df = pd.read_excel(\"Indicateur Intensité Macrosismique maximale.xlsx\")\n",
    "    train_complete_df = train_complete_df.merge(Indensite_Macrosismique_df[[\"INSEE_COM\",\"INT_MAX_CALC\",\"NB_TOTAL\",\"INTERPOLEE\"]], how='left', left_on='Insee', right_on='INSEE_COM', right_index=False)\n",
    "    # Fill Na with 0 considering there is no Indensite_Macrosismique_df\n",
    "    train_complete_df.fillna(0, inplace=True)\n",
    "    del train_complete_df[\"INSEE_COM\"]\n",
    "    \n",
    "    \n",
    "    # 2 : Get all data related to sinistrality frequency\n",
    "    FrequenceTGN_df = pd.read_excel(\"FrequenceTGN_ParDep_Cumul1987_2015.xlsx\")\n",
    "    # Use Num_Dep to merge freuency data to our main dataframe\n",
    "    FrequenceTGN_df[\"Num_Dep\"] = FrequenceTGN_df[\"Num_Dep\"].astype(str).apply(lambda x : x.zfill(2))\n",
    "    train_complete_df[\"Num_Dep\"] = train_complete_df.CODGEO.str[:2]\n",
    "    train_complete_df = train_complete_df.merge(FrequenceTGN_df[[\"Num_Dep\",\"Freq_TGN_1987_2015\"]], how='left', left_on='Num_Dep', right_on='Num_Dep', right_index=False)\n",
    "    \n",
    "    nbReco_inond_df = pd.read_excel(\"1-2.Indicateur_CCR_nbReco_inond2018.xls\")\n",
    "    nbReco_inond_df.rename({'Nombre de reconnaissances Cat Nat  inondation':\"Nb_reco_CatNat_inon\"}, axis='columns', inplace=True)\n",
    "    nbReco_inond_df.loc[nbReco_inond_df[\"Nb_reco_CatNat_inon\"] =='Pas de reconnaissance', \"Nb_reco_CatNat_inon\"] = '0'\n",
    "    \n",
    "    FreqMoyenne_inond_df = pd.read_excel(\"5.Indicateur_CCR_FreqMoyenne_inond_1995_2014.xls\")\n",
    "    FreqMoyenne_inond_df.rename({\"Fréquence moyenne de sinistres inondation (tous types)\":\"Freq_moy_inon\"}, axis='columns', inplace=True)\n",
    "    FreqMoyenne_inond_df.loc[FreqMoyenne_inond_df[\"Freq_moy_inon\"]==\"Pas de sinistre ou de risque répertoriés à CCR\", \"Freq_moy_inon\"] = '0'\n",
    "    \n",
    "    # Merge inondation data to train data\n",
    "    train_complete_df = train_complete_df.merge(nbReco_inond_df[[\"Code INSEE\",\"Nb_reco_CatNat_inon\"]], how='left', left_on='Insee', right_on='Code INSEE', right_index=False)\n",
    "    del train_complete_df[\"Code INSEE\"]\n",
    "    train_complete_df = train_complete_df.merge(FreqMoyenne_inond_df[[\"Code INSEE\",\"Freq_moy_inon\"]], how='left', left_on='Insee', right_on='Code INSEE', right_index=False)\n",
    "    del train_complete_df[\"Code INSEE\"]\n",
    "\n",
    "    nbReco_sechRGA_df = pd.read_excel(\"7.Indicateur_CCR_nbReco_sechRGA_2018.xls\")\n",
    "    nbReco_sechRGA_df.rename({\"Nombre de reconnaissances Cat Nat sécheresse\":\"Nb_reco_CatNat_sech\"}, axis='columns', inplace=True)\n",
    "    nbReco_sechRGA_df.loc[nbReco_sechRGA_df[\"Nb_reco_CatNat_sech\"] == \"Pas de reconnaissance\", \"Nb_reco_CatNat_sech\"]='0'\n",
    "\n",
    "    FreqMoyenne_sechRGA_df = pd.read_excel(\"10.Indicateur_CCR_FreqMoyenne_sechRGA_1995_2014.xls\")\n",
    "    FreqMoyenne_sechRGA_df.rename({\"Fréquence moyenne de sinistres sécheresse\":\"Freq_moy_sech\"}, axis=\"columns\", inplace=True)\n",
    "    FreqMoyenne_sechRGA_df.loc[FreqMoyenne_sechRGA_df[\"Freq_moy_sech\"]==\"Pas de sinistre ou de risque répertoriés à CCR\", \"Freq_moy_sech\"] = \"0\"\n",
    "\n",
    "    # Merge \"sécheresse\" data to the train dataframe\n",
    "    train_complete_df = train_complete_df.merge(nbReco_sechRGA_df[[\"Code INSEE\",\"Nb_reco_CatNat_sech\"]], how='left', left_on='Insee', right_on='Code INSEE', right_index=False)\n",
    "    del train_complete_df[\"Code INSEE\"]\n",
    "    train_complete_df = train_complete_df.merge(FreqMoyenne_sechRGA_df[[\"Code INSEE\",\"Freq_moy_sech\"]], how='left', left_on='Insee', right_on='Code INSEE', right_index=False)\n",
    "    del train_complete_df[\"Code INSEE\"]\n",
    "    \n",
    "    FreqMoyenne_seismes_df = pd.read_excel(\"14.Indicateur_CCR_FreqMoyenne_seismes_1995_2014.xls\")\n",
    "    FreqMoyenne_seismes_df.rename({\"Fréquence moyenne de sinistres séisme\":\"Freq_moy_sei\"}, axis=\"columns\", inplace=True)\n",
    "    FreqMoyenne_seismes_df.loc[FreqMoyenne_seismes_df[\"Freq_moy_sei\"]==\"Pas de sinistre ou de risque répertoriés à CCR\", \"Freq_moy_sei\"]=\"0\"\n",
    "\n",
    "    # Merge \"séisme\" data to the train dataframe\n",
    "    train_complete_df = train_complete_df.merge(FreqMoyenne_seismes_df[[\"Code INSEE\",\"Freq_moy_sei\"]], how='left', left_on='Insee', right_on='Code INSEE', right_index=False)\n",
    "    del train_complete_df[\"Code INSEE\"]\n",
    "    \n",
    "    nbReco_mvt_df = pd.read_excel(\"16.Indicateur_CCR_nbReco_mvt2018.xls\")\n",
    "    nbReco_mvt_df.rename({\"Nombre de reconnaissances Cat Nat MVT\":\"Nb_reco_CatNat_MVT\"}, axis=\"columns\", inplace=True)\n",
    "    nbReco_mvt_df.loc[nbReco_mvt_df[\"Nb_reco_CatNat_MVT\"]==\"Pas de reconnaissance\", \"Nb_reco_CatNat_MVT\"]=\"0\"\n",
    "\n",
    "    FreqMoyenne_mvt_df = pd.read_excel(\"19.Indicateur_CCR_FreqMoyenne_mvt_1995_2014.xls\")\n",
    "    FreqMoyenne_mvt_df.rename({\"Fréquence moyenne de sinistres MVT\":\"Freq_moy_MVT\"}, axis=\"columns\", inplace=True)\n",
    "    FreqMoyenne_mvt_df.loc[FreqMoyenne_mvt_df[\"Freq_moy_MVT\"]==\"Pas de sinistre ou de risque répertoriés à CCR\", \"Freq_moy_MVT\"]=\"0\"\n",
    "\n",
    "    # Merge \"sécheresse\" data to the train dataframe\n",
    "    train_complete_df = train_complete_df.merge(nbReco_mvt_df[[\"Code INSEE\",\"Nb_reco_CatNat_MVT\"]], how='left', left_on='Insee', right_on='Code INSEE', right_index=False)\n",
    "    del train_complete_df[\"Code INSEE\"]\n",
    "    train_complete_df = train_complete_df.merge(FreqMoyenne_mvt_df[[\"Code INSEE\",\"Freq_moy_MVT\"]], how='left', left_on='Insee', right_on='Code INSEE', right_index=False)\n",
    "    del train_complete_df[\"Code INSEE\"]\n",
    "    \n",
    "    # Impute NaN with 0\n",
    "    train_complete_df.fillna(0, inplace=True)\n",
    "      \n",
    "    # Define a categ type column list to transform with dummies values\n",
    "    freq_col_list = [col for col in train_complete_df.columns if 'Freq' in col]\n",
    "    freq_col_list.remove(\"Freq_TGN_1987_2015\")\n",
    "\n",
    "    # Encode new categorial features named Freq*\n",
    "    for col in freq_col_list:\n",
    "        # Transform data to strings\n",
    "        train_complete_df[col] = train_complete_df[col].apply(lambda x: str(x).rstrip().replace(\" \",\"\"))\n",
    "        train_complete_df[col] = train_complete_df[col].apply(lambda x: str(x))\n",
    "    \n",
    "        # Check all values to transform them to new binary column\n",
    "        good_cols = [col+'_'+i for i in train_complete_df[col].unique()]\n",
    "        train_complete_df = pd.concat((train_complete_df, pd.get_dummies(train_complete_df[col], prefix = col)[good_cols]), axis = 1)\n",
    "        del train_complete_df[col]\n",
    "    \n",
    "        \n",
    "    \n",
    "    return train_complete_df\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove some categorical variables \n",
    "def clean_cols(train_complete_df):\n",
    "    Insee = train_complete_df[\"Insee\"]\n",
    "    del train_complete_df[\"Insee\"]\n",
    "\n",
    "    CODGEO = train_complete_df[\"CODGEO\"]\n",
    "    del train_complete_df[\"CODGEO\"]\n",
    "\n",
    "    NOM_COM = train_complete_df[\"NOM_COM\"]\n",
    "    del train_complete_df[\"NOM_COM\"]\n",
    "\n",
    "    Num_Dep = train_complete_df[\"Num_Dep\"]\n",
    "    del train_complete_df[\"Num_Dep\"]\n",
    "    \n",
    "    # Enforce type\n",
    "    train_complete_df[\"Nb_reco_CatNat_MVT\"] = train_complete_df[\"Nb_reco_CatNat_MVT\"].astype(int)\n",
    "    train_complete_df[\"Nb_reco_CatNat_inon\"] = train_complete_df[\"Nb_reco_CatNat_inon\"].astype(int) \n",
    "    train_complete_df[\"Nb_reco_CatNat_sech\"] = train_complete_df[\"Nb_reco_CatNat_sech\"].astype(int)\n",
    "    \n",
    "    return train_complete_df, CODGEO, NOM_COM, Num_Dep\n",
    "\n",
    "# Rename cols because of some models like XGB\n",
    "def rename_df_cols(df):\n",
    "    new_colnames = list(map(lambda x : x.replace(\"<\",\"_INF_\"), list(df.columns.values)))\n",
    "    new_colnames = list(map(lambda x : x.replace(\">\",\"_SUP_\"), new_colnames))\n",
    "    df.columns = new_colnames\n",
    "\n",
    "    return df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to add encoded new variables identifying a row to a cluster established with DBSCAN or KMeans++\n",
    "def encode_clusters(train_complete_df, model_clustering, N_eps=40000):\n",
    "    \n",
    "    # Build clusters depnding on a clustering modelization\n",
    "    if model_clustering == \"KMeans\":\n",
    "        ### Create a new features with the kmeans++ cluster \n",
    "        y_clusters = KMeans(n_clusters=N_Clusters, init='k-means++', random_state=41).fit_predict(train_complete_df)\n",
    "    elif model_clustering == \"DBSCAN\":\n",
    "        db = DBSCAN(eps=N_eps, min_samples=5, n_jobs=-1).fit(train_complete_df)\n",
    "        y_clusters = db.labels_\n",
    "        \n",
    "    train_complete_df = pd.concat((train_complete_df.reset_index(drop=True), pd.DataFrame({\"y_clusters\":y_clusters}) ), axis = 1)\n",
    "    #train_complete_df.rename({0:\"y_clusters\"}, axis=\"columns\", inplace=True)\n",
    "    \n",
    "    # Transform data to strings\n",
    "    col = \"y_clusters\"\n",
    "    train_complete_df[col] = train_complete_df[col].apply(lambda x: str(x).rstrip().replace(\" \",\"\"))\n",
    "    train_complete_df[col] = train_complete_df[col].apply(lambda x: str(x))\n",
    "    \n",
    "    # Check all values to transform them to new binary column\n",
    "    good_cols = [col+'_'+i for i in train_complete_df[col].unique()]\n",
    "    train_complete_df = pd.concat((train_complete_df, pd.get_dummies(train_complete_df[col], prefix = col)[good_cols]), axis = 1)\n",
    "    del train_complete_df[col]\n",
    "            \n",
    "    return train_complete_df\n",
    "\n",
    "\n",
    "def remove_outliers(train_complete_df):\n",
    "    # Add Cluster number as a new feature\n",
    "    train_complete_df = encode_clusters(train_complete_df, \"DBSCAN\", N_eps=40000)\n",
    "\n",
    "    # Get outliers idx to remove to apply it on CV train folders\n",
    "    #target = pd.DataFrame({\"target\":y_train.target}).reset_index(drop=True)\n",
    "    #target = target[train_complete_df[\"y_clusters_-1\"]!=1]\n",
    "    #train_complete_df = train_complete_df[train_complete_df[\"y_clusters_-1\"]!=1]\n",
    "    noise_idx_list = [i for i,x in enumerate(list(train_complete_df[\"y_clusters_-1\"])) if x==1]\n",
    "    del train_complete_df[\"y_clusters_-1\"]\n",
    "\n",
    "    return noise_idx_list\n",
    "\n",
    "\n",
    "\n",
    "def remove_combined_outliers(train_complete_df, test_complete_df, n_eps):\n",
    "    \n",
    "    #target = pd.DataFrame({\"target\":target.target}).reset_index(drop=True)\n",
    "    \n",
    "    # Combine train and test datasets \n",
    "    combined_df = train_complete_df.append(test_complete_df, sort=True)\n",
    "    combined_df.reset_index(inplace=True)\n",
    "    combined_df.drop('index', inplace=True, axis=1)\n",
    "\n",
    "    # Look at the combine row number\n",
    "    max_idx_train = train_complete_df.shape[0]\n",
    "    \n",
    "    # DBScan clustering\n",
    "    db = DBSCAN(eps=n_eps, min_samples=5, n_jobs=-1).fit(combined_df)\n",
    "    y_clusters = list(db.labels_)\n",
    " \n",
    "    train_complete_df = pd.concat((train_complete_df.reset_index(drop=True), pd.DataFrame({\"y_clusters\":y_clusters[:max_idx_train]}) ), axis = 1)\n",
    "    \n",
    "    # Transform data to strings\n",
    "    col = \"y_clusters\"\n",
    "    train_complete_df[col] = train_complete_df[col].apply(lambda x: str(x).rstrip().replace(\" \",\"\"))\n",
    "    train_complete_df[col] = train_complete_df[col].apply(lambda x: str(x))\n",
    "    \n",
    "    # Check all values to transform them to new binary column\n",
    "    good_cols = [col+'_'+i for i in train_complete_df[col].unique()]\n",
    "    train_complete_df = pd.concat((train_complete_df, pd.get_dummies(train_complete_df[col], prefix = col)[good_cols]), axis = 1)\n",
    "    del train_complete_df[col]\n",
    "    \n",
    "\n",
    "    # Number of test element in the noise\n",
    "    noise_idx_list = [i for i,x in enumerate(list(y_clusters)) if x==-1]\n",
    "    train_to_del_idx = [i for i in noise_idx_list if i < max_idx_train]\n",
    "\n",
    "    # Remove outliers int the train\n",
    "    #train_complete_df = train_complete_df.drop(train_complete_df.index[train_to_del_idx])\n",
    "    #target = target.drop(target.index[train_to_del_idx])\n",
    "    \n",
    "    del train_complete_df[\"y_clusters_-1\"]\n",
    "    \n",
    "    return train_to_del_idx\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING *** OLE2 inconsistency: SSCS size is 0 but SSAT size is non-zero\n"
     ]
    }
   ],
   "source": [
    "# Read Generali data\n",
    "train, test, target = read_generali_data()\n",
    "\n",
    "#Define categ_col_list\n",
    "categ_col_list = [col for col in train.columns if 'categ' in col]\n",
    "categ_col_list.remove(\"ft_22_categ\")\n",
    "\n",
    "# Tranform to dummies\n",
    "train_dummies, test_dummies = dummies(train, test , columns = categ_col_list)\n",
    "\n",
    "train_dummies = transform_to_dummies(train, train_dummies)\n",
    "test_dummies = transform_to_dummies(test, test_dummies)\n",
    "\n",
    "# Impute with KNN\n",
    "train_dummies,knn_22, knn_superficie, knn_Insee = impute_categ_knn(train_dummies, 3)\n",
    "test_dummies = impute_categ_knn(test_dummies, 0, knn_22, knn_superficie, knn_Insee)\n",
    "\n",
    "# Create some features to help model\n",
    "train_dummies = create_features(train_dummies, train)\n",
    "test_dummies = create_features(test_dummies, test)\n",
    "\n",
    "\n",
    "# Read commune data \n",
    "commune_df_dummies = read_commune_social_data()\n",
    "\n",
    "# So we can join dataframes together directly\n",
    "train_complete_df = train_dummies.merge(commune_df_dummies, how='left', left_on='Insee', right_on='CODGEO')\n",
    "test_complete_df = test_dummies.merge(commune_df_dummies, how='left', left_on='Insee', right_on='CODGEO')\n",
    "\n",
    "# And create some interactions between features\n",
    "train_complete_df = create_commune_data(train_complete_df)\n",
    "test_complete_df = create_commune_data(test_complete_df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Orientation Economique_BassinIndustriel\n",
      "Orientation Economique_BassinRésidentiel\n",
      "Orientation Economique_BassinUrbain\n",
      "Orientation Economique_Bassindiversifié\n",
      "Orientation Economique_BassinsAgroalimentaire\n",
      "Urbanité Ruralité_Comrurale<2000mhabts\n",
      "Urbanité Ruralité_Com<50mhabts\n",
      "Urbanité Ruralité_Comrurale>2000habts\n",
      "Urbanité Ruralité_Com<10mhabts\n",
      "Urbanité Ruralité_Com<200mhabts\n",
      "Urbanité Ruralité_Com>200mhabts\n",
      "Orientation Economique_BassinIndustriel\n",
      "Orientation Economique_BassinRésidentiel\n",
      "Orientation Economique_BassinUrbain\n",
      "Orientation Economique_Bassindiversifié\n",
      "Orientation Economique_BassinsAgroalimentaire\n",
      "Urbanité Ruralité_Comrurale<2000mhabts\n",
      "Urbanité Ruralité_Com<50mhabts\n",
      "Urbanité Ruralité_Comrurale>2000habts\n",
      "Urbanité Ruralité_Com<10mhabts\n",
      "Urbanité Ruralité_Com<200mhabts\n",
      "Urbanité Ruralité_Com>200mhabts\n"
     ]
    }
   ],
   "source": [
    "# Impute Commune NaN data\n",
    "train_complete_df, knn_class_list, knn_class_codgeo, knn_reg_list = impute_commune_NaN(train_complete_df, n_knn=3)\n",
    "test_complete_df = impute_commune_NaN(test_complete_df, 0, knn_class_list, knn_class_codgeo, knn_reg_list)\n",
    "\n",
    "# Add data from ONRN \n",
    "train_complete_df = add_ONRN_data(train_complete_df)\n",
    "test_complete_df = add_ONRN_data(test_complete_df)\n",
    "\n",
    "# Clean dataframes with useless cols for the models\n",
    "train_complete_df, CODGEO, NOM_COM, Num_Dep = clean_cols(train_complete_df)\n",
    "test_complete_df, CODGEO, NOM_COM, Num_Dep = clean_cols(test_complete_df)\n",
    "\n",
    "# Rename cols\n",
    "train_complete_df = rename_df_cols(train_complete_df)\n",
    "test_complete_df = rename_df_cols(test_complete_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_complete_df.to_csv(\"./train_complete_df.csv\")\n",
    "test_complete_df.to_csv(\"./test_complete_df.csv\")\n",
    "target.to_csv(\"./target.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_complete_df  = pd.read_csv(\"./train_complete_df.csv\")\n",
    "test_complete_df = pd.read_csv(\"./test_complete_df.csv\")\n",
    "target = pd.read_csv(\"./target.csv\")\n",
    "\n",
    "del train_complete_df[\"Unnamed: 0\"]\n",
    "del test_complete_df[\"Unnamed: 0\"]\n",
    "del target[\"Unnamed: 0\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Identify Outliers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Combine train and test datasets \n",
    "combined_df = train_complete_df.append(test_complete_df, sort=True)\n",
    "combined_df.reset_index(inplace=True)\n",
    "combined_df.drop('index', inplace=True, axis=1)\n",
    "\n",
    "#Look at the combine row number\n",
    "max_idx_train = train_complete_df.shape[0]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from sklearn.cluster import DBSCAN\n",
    "\n",
    "Identify outliers by looking at noise just before switching from only one cluster to 2\n",
    "n_epss = list()\n",
    "n_noise_s = list()\n",
    "n_clusters_s = list()\n",
    "\n",
    "for n_eps in np.arange(20000,50000,500): \n",
    "    db = DBSCAN(eps=n_eps, min_samples=5, n_jobs=-1).fit(combined_df)\n",
    "    labels = db.labels_\n",
    "    n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)\n",
    "    n_noise_ = list(labels).count(-1)\n",
    "    n_epss.append(n_eps)\n",
    "    print(\"neps : \"+ str(n_eps))\n",
    "    n_clusters_s.append(n_clusters_)\n",
    "    print(\"nclusters : \" + str(n_clusters_))\n",
    "    n_noise_s.append(n_noise_)\n",
    "    print(\"noise : \"+str(n_noise_))\n",
    "    \n",
    "    # Number of test element in the noise\n",
    "    noise_idx_list = [i for i,x in enumerate(list(labels)) if x==-1]\n",
    "    nb_test_in_the_noise = len([i for i in noise_idx_list if i >= max_idx_train])\n",
    "    print(\"Nb test in the noise : \"+str(nb_test_in_the_noise))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After neps over 37000, there is only one test row in the noise but still 12 train that do not fit any test data.<br>\n",
    "As we go down from 17(from train)-2(from test)=15 to 13-1=12 we think that we will be able to train the model on those points.<br>\n",
    "We will remove them at this step to remove noise for the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Outliers management"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2 methods to remove outliers looking only at train data or including test data\n",
    "outliers_with_test = False\n",
    "if outliers_with_test :\n",
    "    outliers_idx = remove_combined_outliers(train_complete_df, test_complete_df, 37000)\n",
    "else:\n",
    "    outliers_idx = remove_outliers(train_complete_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Build Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from random import seed\n",
    "from random import randrange\n",
    " \n",
    "# Split a dataset into k folds\n",
    "def cross_validation_split_idx(dataframe, folds=3):\n",
    "    seed(1)\n",
    "    dataframe_split = list()\n",
    "    dataframe_copy = list(dataframe.index)\n",
    "    fold_size = int(len(dataframe.index) / folds)\n",
    "    \n",
    "    # Feed each folder\n",
    "    for i in range(folds):\n",
    "        fold = list()\n",
    "    \n",
    "        # if the last fold we add rows lost per splitting by interger value\n",
    "        if i == (folds-1):\n",
    "            fold_size = fold_size + (len(dataframe.index)-int(len(dataframe.index) / folds)*folds)\n",
    "            \n",
    "        while len(fold) < fold_size:    \n",
    "            index = randrange(len(dataframe_copy))\n",
    "            fold.append(dataframe_copy.pop(index))\n",
    "            \n",
    "        dataframe_split.append(fold)\n",
    "    return dataframe_split\n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build a list of dataframes containing data and target with the same target balance\n",
    "def cross_validation_split(train_complete_df, target, folds=3, target_signed=False):\n",
    "    \n",
    "    seed(1)\n",
    "    train_complete_df.reset_index(inplace=True, drop=True)\n",
    "    target.reset_index(inplace=True, drop=True)\n",
    "\n",
    "    # Split dataframes with index per label values\n",
    "    target_1_idx = target[target.target==1].index\n",
    "    if target_signed:\n",
    "        target_0_idx = target[target.target==-1].index\n",
    "    else:\n",
    "        target_0_idx = target[target.target==0].index\n",
    "\n",
    "    target_0 = target.iloc[target_0_idx]\n",
    "    target_1 = target.iloc[target_1_idx]\n",
    "\n",
    "    train_complete_df_0 = train_complete_df.iloc[target_0_idx]\n",
    "    train_complete_df_1 = train_complete_df.iloc[target_1_idx]\n",
    "\n",
    "    folds_target0_idx = cross_validation_split_idx(target_0, folds)\n",
    "    folds_target1_idx = cross_validation_split_idx(target_1, folds)\n",
    "\n",
    "    # Gather new dataframes for each folder with finally more or less the same balance\n",
    "    CV = list()\n",
    "    CV_0 = list()\n",
    "    CV_1 = list()\n",
    "    for i in range(folds):\n",
    "        CV_0.append(pd.concat((target_0[target_0.index.isin(folds_target0_idx[i])], train_complete_df_0[target_0.index.isin(folds_target0_idx[i])] ), axis=1))\n",
    "        CV_1.append(pd.concat((target_1[target_1.index.isin(folds_target1_idx[i])], train_complete_df_1[target_1.index.isin(folds_target1_idx[i])] ), axis=1))\n",
    "        CV.append(pd.concat((CV_0[i], CV_1[i]), axis=0))\n",
    "        \n",
    "    return CV\n",
    "\n",
    "\n",
    "# Define folders number\n",
    "seed(1)\n",
    "nb_CV = 5\n",
    "CV = cross_validation_split(train_complete_df, target, folds=nb_CV, target_signed=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import make_scorer\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "pd.options.display.float_format = '{:,.3f}'.format\n",
    "\n",
    "\n",
    "# Define score function\n",
    "def gini(actual, pred):\n",
    "    assert (len(actual) == len(pred)) # Check params\n",
    "    all = np.asarray(np.c_[actual, pred, np.arange(len(actual))], dtype=np.float)\n",
    "    all = all[np.lexsort((all[:, 2], -1 * all[:, 1]))]\n",
    "    totalLosses = all[:, 0].sum()\n",
    "    giniSum = all[:, 0].cumsum().sum() / totalLosses\n",
    "\n",
    "    giniSum -= (len(actual) + 1) / 2.\n",
    "    return giniSum / len(actual)\n",
    "\n",
    "\n",
    "def gini_normalized(actual, pred):\n",
    "    return gini(actual, pred) / gini(actual, actual)\n",
    "\n",
    "# evaluate the model gini normalized score\n",
    "def get_gini_score(model, X_test, y_test):\n",
    "    model_pred = model.predict_proba(X_test)[:,1] \n",
    "    return gini_normalized(y_test.target, model_pred)\n",
    "\n",
    "\n",
    "\n",
    "def double_split_train_test(rf, train_complete_df, target, outliers_idx, nb_CV = 5,  print_scores=True, print_feature_bool=False):\n",
    "    # Split dataset into train & test \n",
    "    X_train, X_test, y_train, y_test = train_test_split(train_complete_df, target, test_size=0.30, random_state=41)\n",
    "    \n",
    "    # Undersample into the train dataset (not applied on test dataset because clustering features are not kept by models)\n",
    "    #X_train, y_train = undersample_train(train_complete_df, y_train) \n",
    "\n",
    "    y_train_s = y_train.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "    y_test_s = y_test.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "    y_train_s = pd.DataFrame({\"target\":y_train_s}).reset_index(drop = True)\n",
    "    y_test_s = pd.DataFrame({\"target\":y_test_s}).reset_index(drop = True)\n",
    "\n",
    "    # Define CV folds\n",
    "    seed(1)\n",
    "    CV = cross_validation_split(X_train, y_train_s, folds=nb_CV, target_signed=True) \n",
    "    \n",
    "    # Internal CV evaluation\n",
    "    cv_train_idx = list()\n",
    "    cv_test_idx = list()\n",
    "    train_score = list()\n",
    "    test_score = list()\n",
    "    \n",
    "    # Gather CV for a train, test and estimation iteration\n",
    "    for j in range(nb_CV):\n",
    "        \n",
    "        # Build the train dataset on folders\n",
    "        cv_train_idx.append([ CV[x].index for x in range(nb_CV) if x !=j ])\n",
    "        X_train_train = X_train[X_train.index.isin([val for sublist in cv_train_idx[j] for val in sublist])]\n",
    "        y_train_s_train = y_train_s[y_train_s.index.isin([val for sublist in cv_train_idx[j] for val in sublist])]\n",
    "    \n",
    "        # Remove outliers from the train \"only\"\n",
    "        # filter out outliers_idx not in the train folders\n",
    "        oi = iter(outliers_idx)\n",
    "        X_train_train_outliers_idx = all(lookfor in oi for lookfor in X_train_train.index)\n",
    "        X_train_train = X_train_train.drop(X_train_train.index[X_train_train_outliers_idx])\n",
    "        y_train_s_train = y_train_s_train.drop(y_train_s_train.index[X_train_train_outliers_idx])\n",
    "        \n",
    "        # Build the test dataset on a folder \n",
    "        cv_test_idx.append(CV[j].index)\n",
    "        X_train_test = X_train[X_train.index.isin(cv_test_idx[j])]\n",
    "        y_train_s_test = y_train_s[y_train_s.index.isin(cv_test_idx[j])]\n",
    "    \n",
    "        rf.fit(X_train_train, np.ravel(y_train_s_train))\n",
    "        train_score.append(get_gini_score(rf, X_train_train, y_train_s_train))\n",
    "        test_score.append(get_gini_score(rf, X_train_test, y_train_s_test))\n",
    "\n",
    "    \n",
    "    # Check second CV level model perf\n",
    "    rf.fit(X_train, np.ravel(y_train_s))\n",
    "    ext_test_score = get_gini_score(rf, X_test, y_test_s)\n",
    "    \n",
    "    # Check first CV level model perf\n",
    "    if print_scores :\n",
    "        print(\"Train mean score: \"+ str(np.mean(train_score)))\n",
    "        print(\"Test mean score : \"+ str(np.mean(test_score)))\n",
    "        print(\"STD Test score: \"+ str(np.std(test_score)))    \n",
    "        print(\"External Test score : \"+ str(ext_test_score))\n",
    "\n",
    "    rf_feature_importances = pd.DataFrame(rf.feature_importances_, index = X_train.columns, columns=['importance']).sort_values('importance', ascending=False)\n",
    "\n",
    "    # Arbitrary print out the firsts n features\n",
    "    if print_feature_bool :\n",
    "        print(rf_feature_importances[:200] )\n",
    "    \n",
    "    return np.std(test_score), np.mean(train_score), np.mean(test_score), ext_test_score, rf, rf_feature_importances\n",
    "\n",
    "# Function to plot the 3 scores produced by a 2 level cross validation \n",
    "def plot_scores(mean_train_scores, mean_test_scores, external_test_scores, l_title):\n",
    "    rf_scores = pd.DataFrame({\"mean_train_scores\":mean_train_scores, \"mean_test_scores\":mean_test_scores, \"external_test_scores\":external_test_scores })\n",
    "    sns.lineplot(data=rf_scores.loc[:,[\"mean_train_scores\",\"mean_test_scores\",\"external_test_scores\"]],palette=\"tab10\", linewidth=2.5).set_title(l_title)\n",
    "    return \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.utils.multiclass import unique_labels\n",
    "\n",
    "def plot_confusion_matrix(y_true, y_pred, classes,\n",
    "                          normalize=False,\n",
    "                          title=None,\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if not title:\n",
    "        if normalize:\n",
    "            title = 'Normalized confusion matrix'\n",
    "        else:\n",
    "            title = 'Confusion matrix, without normalization'\n",
    "\n",
    "    # Compute confusion matrix\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    ax.figure.colorbar(im, ax=ax)\n",
    "    # We want to show all ticks...\n",
    "    ax.set(xticks=np.arange(cm.shape[1]),\n",
    "           yticks=np.arange(cm.shape[0]),\n",
    "           # ... and label them with the respective list entries\n",
    "           xticklabels=classes, yticklabels=classes,\n",
    "           title=title,\n",
    "           ylabel='True label',\n",
    "           xlabel='Predicted label')\n",
    "\n",
    "    # Rotate the tick labels and set their alignment.\n",
    "    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n",
    "             rotation_mode=\"anchor\")\n",
    "\n",
    "    # Loop over data dimensions and create text annotations.\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i in range(cm.shape[0]):\n",
    "        for j in range(cm.shape[1]):\n",
    "            ax.text(j, i, format(cm[i, j], fmt),\n",
    "                    ha=\"center\", va=\"center\",\n",
    "                    color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "    fig.tight_layout()\n",
    "    return ax\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "def analyze_model(model_pred_proba, actual_target):\n",
    "    np.set_printoptions(precision=2)\n",
    "    \n",
    "    # Transform predictions to input uniform data into the confusion matrix function\n",
    "    y_pred = [0 if x < 0.5 else 1 for x in model_pred_proba]\n",
    "    class_names = [0, 1]\n",
    "    \n",
    "    # Plot non-normalized confusion matrix\n",
    "    plot_confusion_matrix(actual_target, y_pred, classes=class_names,\n",
    "                      title='Confusion matrix')\n",
    "    \n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train Random Forest with best hyperparameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Selection for Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train mean score: 0.7384477214352574\n",
      "Test mean score : 0.3539939928019786\n",
      "STD Test score: 0.02013023124806095\n",
      "External Test score : 0.3664856806705494\n"
     ]
    }
   ],
   "source": [
    "# Build a lot of simple tree with hyperparameters at random value\n",
    "rf = RandomForestClassifier(n_estimators=400, criterion = \"gini\", \n",
    "                            min_impurity_decrease = 0, \n",
    "                            max_depth=8,\n",
    "                            class_weight = {-1:1, 1:3}, # Re-balance weight\n",
    "                            max_features='sqrt', \n",
    "                            oob_score = True,\n",
    "                            random_state=41)\n",
    "\n",
    "##############\n",
    "# First step : Order auto_selected_features by feature_importance\n",
    "std, mean_train, mean_test, ext_test_score, rf_trained, rf_feature_importances = double_split_train_test(rf, train_complete_df, target, outliers_idx, nb_CV = 5)\n",
    "ordered_cols_by_importance = list(rf_feature_importances.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Then go forward removing features correlated over corr_threshold\n",
    "# Get correlation\n",
    "corr = train_complete_df[ordered_cols_by_importance].corr()\n",
    "\n",
    "# Step forward filtering out features with more than a given threshold correlation \n",
    "corr_threshold = 0.5\n",
    "columns_mask = np.full((corr.shape[0],), True, dtype=bool)\n",
    "for i in range(corr.shape[0]):\n",
    "    for j in range(i+1, corr.shape[0]):\n",
    "        if corr.iloc[i,j] >= corr_threshold:\n",
    "            if columns_mask[j]:\n",
    "                columns_mask[j] = False\n",
    "\n",
    "auto_selected_cols = train_complete_df[ordered_cols_by_importance].columns[columns_mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split input train dataset into new train and test subsets \n",
    "columns_list = train_complete_df.columns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune the number of features to select"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "\n",
    "# Instantiate the Random Forest Model\n",
    "rf = RandomForestClassifier(max_depth=6, \n",
    "                            class_weight = {-1:1, 1:3}, \n",
    "                            criterion = 'gini',\n",
    "                            max_features = 6,\n",
    "                            min_impurity_decrease = 0,\n",
    "                            n_estimators = 400,\n",
    "                            oob_score = True,\n",
    "                            n_jobs=-1,\n",
    "                            random_state=41)\n",
    "                            \n",
    "                            \n",
    "\n",
    "# For various features number took among the feature importance list produced with \"auto_selected_cols\", \n",
    "# fit and evaluate models performances\n",
    "nb_feat_mean_train_scores = list()\n",
    "nb_feat_mean_test_scores=list()\n",
    "nb_feat_ext_test_scores = list()\n",
    "x_values = range(6,len(auto_selected_cols))\n",
    "\n",
    "for i in x_values:\n",
    "    # Define the current set of features\n",
    "    list_var = list(rf_feature_importances[:i].index)    \n",
    "    #rf.fit(X_train[list_var], y_train_s)   \n",
    "    \n",
    "    # Train and get scores\n",
    "    std, mean_train, mean_test, ext_test_score, rf_trained, rf_feat_imp = double_split_train_test(rf, train_complete_df[list_var], target, outliers_idx, nb_CV = 5, print_scores=False)\n",
    "    nb_feat_mean_train_scores.append(mean_train)\n",
    "    nb_feat_mean_test_scores.append(mean_test)\n",
    "    nb_feat_ext_test_scores.append(ext_test_score)\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plot_scores(nb_feat_mean_train_scores, nb_feat_mean_test_scores, nb_feat_ext_test_scores, \"Random Forest score / Features Nb\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see here that we still need to work our model because of a wide overfitting.<br>\n",
    "First the more we add features, slowly we loose performance on both internal and external test datasets. <br>\n",
    "We reach an optimal point around 2?+3 features.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum gini score (on the external test CV) is reached for a feature number of : 14\n"
     ]
    }
   ],
   "source": [
    "# Max gini scores at iteration :\n",
    "print(\"Maximum gini score (on the external test CV) is reached for a feature number of : \"+str( 3+nb_feat_ext_test_scores.index(max(nb_feat_ext_test_scores))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Tune Nb Trees</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "optim_nb_features = 20\n",
    "\n",
    "# For various forest size fit and evaluate models performances\n",
    "nb_trees_mean_train_scores = list()\n",
    "nb_trees_mean_test_scores=list()\n",
    "nb_trees_ext_test_scores = list()\n",
    "x_values = range(100,1000,50)\n",
    "# For a sequence of forest size evaluate the random forest model built\n",
    "for n_trees in x_values :\n",
    "    \n",
    "    rf = RandomForestClassifier(n_estimators=n_trees, \n",
    "                                criterion = \"gini\", \n",
    "                                min_impurity_decrease = 0, \n",
    "                                max_depth=8,\n",
    "                                class_weight = {-1:1, 1:3}, \n",
    "                                max_features='sqrt', \n",
    "                                oob_score = True,\n",
    "                                n_jobs=-1,\n",
    "                                random_state=41)\n",
    "    \n",
    "    # Save the current model metrics \n",
    "    std, mean_train, mean_test, ext_test_score, rf_trained, rf_feat_imp = double_split_train_test(rf, train_complete_df[auto_selected_cols[:optim_nb_features]], target, nb_CV = 5, print_scores=False)\n",
    "    nb_trees_mean_train_scores.append(mean_train)\n",
    "    nb_trees_mean_test_scores.append(mean_test)\n",
    "    nb_trees_ext_test_scores.append(ext_test_score)\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot scores depending on the trees number in the forest\n",
    "plot_scores(nb_trees_mean_train_scores, nb_trees_mean_test_scores, nb_trees_ext_test_scores, \"Random Forest score / Nb trees\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First of all, given the fact we have set the depth parameter to 8 we do not observe overfitting.<br>\n",
    "Given the fact we keep all the 20 best features from the \"auto_selected_cols\" list, changing the number of trees doesn't modify a lot scores once we have reached the 6th iteration.<br>\n",
    "We will take 100 + (7-1) * 50 = 400 as number of trees.<br><br>\n",
    "<b>Tune the number of features at split</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For various number of features to consider at split, fit and evaluate models performances\n",
    "feat_split_mean_train_scores = list()\n",
    "feat_split_mean_test_scores=list()\n",
    "feat_split_ext_test_scores = list()\n",
    "\n",
    "# For a sequence of feature to consider to split data \n",
    "x_values = range(3,20,1)\n",
    "for n_features_per_split in x_values:\n",
    "    \n",
    "    rf = RandomForestClassifier(n_estimators=400, \n",
    "                                criterion = \"gini\", \n",
    "                                min_impurity_decrease = 0, \n",
    "                                max_depth=8,\n",
    "                                class_weight = {-1:1, 1:3}, \n",
    "                                max_features=n_features_per_split, \n",
    "                                oob_score = True,\n",
    "                                n_jobs=-1,\n",
    "                                random_state=41)\n",
    "    \n",
    "    # Save the current model metrics \n",
    "    std, mean_train, mean_test, ext_test_score, rf_trained, rf_feat_imp = double_split_train_test(rf, train_complete_df[auto_selected_cols[:optim_nb_features]], target, outliers_idx, nb_CV = 5, print_scores=False)\n",
    "    feat_split_mean_train_scores.append(mean_train)\n",
    "    feat_split_mean_test_scores.append(mean_test)\n",
    "    feat_split_ext_test_scores.append(ext_test_score)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot scores depending on the features number to consider at split \n",
    "plot_scores(feat_split_mean_train_scores, feat_split_mean_test_scores, feat_split_ext_test_scores, \"Random Forest scores / Nb features at split \")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We reach near the top values for the mean test scores around iteration 4, so as we start at 3, <br>\n",
    "we will keep 6 features at split. That gives also a good score on the external CV test."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "<b>Tune trees depth</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For various trees depth fit and evaluate models performances\n",
    "depth_mean_train_scores = list()\n",
    "depth_mean_test_scores=list()\n",
    "depth_ext_test_scores = list()\n",
    "\n",
    "# For a sequence of feature to consider to split data \n",
    "x_values = range(3,20,1)\n",
    "for c_max_depth in x_values:\n",
    "    \n",
    "    # Define and fit the model\n",
    "    rf = RandomForestClassifier(n_estimators=400, \n",
    "                                criterion = \"gini\", \n",
    "                                min_impurity_decrease = 0, \n",
    "                                max_depth=c_max_depth,\n",
    "                                class_weight = {-1:1, 1:3}, \n",
    "                                max_features=6, \n",
    "                                oob_score = True,\n",
    "                                n_jobs=-1,\n",
    "                                random_state=41)\n",
    "    \n",
    "    # Save the current model metrics \n",
    "    std, mean_train, mean_test, ext_test_score, rf_trained, rf_feat_imp = double_split_train_test(rf, train_complete_df[auto_selected_cols[:optim_nb_features]], target, outliers_idx, nb_CV = 5, print_scores=False)\n",
    "    depth_mean_train_scores.append(mean_train)\n",
    "    depth_mean_test_scores.append(mean_test)\n",
    "    depth_ext_test_scores.append(ext_test_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot scores depending on the trees depth \n",
    "plot_scores(depth_mean_train_scores, depth_mean_test_scores, depth_ext_test_scores, \"Random Forest scores / Trees depth \")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we clearly observe overfitting. So we will set our trees depth to avoid this behaviour.<br>\n",
    "Considering both the external and internal test score, we reach a max between 3+4-1 and then overfit. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The optimal depth is 6\n",
      "At this point we got a gini score of :0.42887986850623366\n"
     ]
    }
   ],
   "source": [
    "print(\"The optimal depth is \"+str(3+depth_mean_test_scores.index(max(depth_mean_test_scores))))\n",
    "print(\"At this point we got a gini score of :\"+str(depth_mean_test_scores[3]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Tune class weight</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For various clas weight fit and evaluate models performances\n",
    "weight_mean_train_scores = list()\n",
    "weight_mean_test_scores=list()\n",
    "weight_ext_test_scores = list()\n",
    "\n",
    "# For a sequence of feature to consider to split data \n",
    "x_values = range(1, 10, 1)\n",
    "for c_weight in x_values:\n",
    "    \n",
    "    # Define and fit the model\n",
    "    rf = RandomForestClassifier(n_estimators=400, \n",
    "                                criterion = \"gini\", \n",
    "                                min_impurity_decrease = 0, \n",
    "                                max_depth=6,\n",
    "                                class_weight = {-1:1, 1:c_weight}, \n",
    "                                max_features=6, \n",
    "                                oob_score = True,\n",
    "                                n_jobs=-1,\n",
    "                                random_state=41)\n",
    "    \n",
    "    # Save the current model metrics \n",
    "    std, mean_train, mean_test, ext_test_score, rf_trained, rf_feat_imp = double_split_train_test(rf, train_complete_df[auto_selected_cols[:optim_nb_features]], target, outliers_idx, nb_CV = 5, print_scores=False)\n",
    "    weight_mean_train_scores.append(mean_train)\n",
    "    weight_mean_test_scores.append(mean_test)\n",
    "    weight_ext_test_scores.append(ext_test_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot scores depending on the features number to consider at split \n",
    "plot_scores(weight_mean_train_scores, weight_mean_test_scores, weight_ext_test_scores, \"Random Forest scores / Class Weight \")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Both internal and external test score find a max for a weight at 3."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Train a random Forest with these parameters on a subset of features</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save the RF model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight={-1: 1, 1: 3},\n",
       "            criterion='gini', max_depth=6, max_features=6,\n",
       "            max_leaf_nodes=None, min_impurity_decrease=0,\n",
       "            min_impurity_split=None, min_samples_leaf=1,\n",
       "            min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "            n_estimators=400, n_jobs=-1, oob_score=True, random_state=41,\n",
       "            verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 282,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Retrain RF on best features      \n",
    "rf = RandomForestClassifier(\n",
    "                            max_depth=6, \n",
    "                            class_weight = {-1:1, 1:3}, \n",
    "                            criterion = 'gini',\n",
    "                            max_features = 6,\n",
    "                            min_impurity_decrease = 0,\n",
    "                            n_estimators = 400,\n",
    "                            oob_score = True,\n",
    "                            n_jobs=-1,\n",
    "                            random_state=41)\n",
    "\n",
    "\n",
    "target_s = target.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "rf.fit(train_complete_df[auto_selected_cols[:optim_nb_features]], target_s)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "rf = pickle.dump( rf, open( \"save_rf.p\", \"wb\" ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train mean score: 0.5958531019333461\n",
      "Test mean score : 0.42887986850623366\n",
      "STD Test score: 0.02635387246606552\n",
      "External Test score : 0.4215099687063315\n"
     ]
    }
   ],
   "source": [
    "# Check features\n",
    "std, mean_train, mean_test, ext_test_score, rf_trained, rf_feature_importances = double_split_train_test(rf, train_complete_df[auto_selected_cols[:optim_nb_features]], target, outliers_idx, nb_CV = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict and save result\n",
    "model_pred = rf.predict_proba(test_complete_df[auto_selected_cols[:optim_nb_features]])[:,1]\n",
    "model_pred_df = pd.DataFrame({\"target\":model_pred})\n",
    "model_pred_df.to_csv(\"./lmartin_submission.csv\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train a XGBoost Classifier model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select features for XGBoost Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get feature importance for XGBoost\n",
    "xgb_feature_importances = pd.DataFrame(xgb_clf1.feature_importances_, index = train_complete_df.columns, columns=['importance']).sort_values('importance', ascending=False)\n",
    "ordered_cols_by_importance = list(xgb_feature_importances.index)\n",
    "\n",
    "# Then go forward removing features correlated over corr_threshold\n",
    "# Get correlation\n",
    "corr = train_complete_df[ordered_cols_by_importance].corr()\n",
    "\n",
    "# Step forward filtering out features with more than a given threshold correlation \n",
    "corr_threshold = 0.5\n",
    "columns_mask = np.full((corr.shape[0],), True, dtype=bool)\n",
    "for i in range(corr.shape[0]):\n",
    "    for j in range(i+1, corr.shape[0]):\n",
    "        if corr.iloc[i,j] >= corr_threshold:\n",
    "            if columns_mask[j]:\n",
    "                columns_mask[j] = False\n",
    "\n",
    "auto_selected_cols = train_complete_df[ordered_cols_by_importance].columns[columns_mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2303   78]\n",
      " [ 586  102]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.40969203871736515"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First XGBClassifier \n",
    "import xgboost as xgb\n",
    "from sklearn import metrics\n",
    "\n",
    "\n",
    "def first_xgb(train_complete_df, target):\n",
    "    # First define External test dataset to permit model comparison\n",
    "    X_train, X_test, y_train, y_test = train_test_split(train_complete_df, target, test_size=0.30, random_state=41)\n",
    "    y_train_s = y_train.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "    y_test_s = y_test.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "    #target_s = target.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "\n",
    "    xgb_clf1 = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "       colsample_bytree=0.7, gamma=0, learning_rate=0.01, max_delta_step=0,\n",
    "       max_depth=2, min_child_weight=1, missing=9999999999,\n",
    "       n_estimators=600, n_jobs=-1, nthread=None,\n",
    "       objective='binary:logistic', random_state=0, reg_alpha=0.01,\n",
    "       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n",
    "       subsample=0.4)\n",
    "\n",
    "    xgb_clf1.fit(X_train, y_train_s)\n",
    "    xgb_clf_pred_proba = xgb_clf1.predict_proba(X_test)[:, 1]\n",
    "    \n",
    "    # Display ROD Curve\n",
    "    fpr, tpr, _ = metrics.roc_curve(y_test.target, xgb_clf_pred_proba)\n",
    "    plt.plot(fpr,tpr)\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "    plt.title(\"ROC Curve\")\n",
    "    plt.show()\n",
    "    \n",
    "    # Display confusion matrix\n",
    "    analyze_model(xgb_clf_pred_proba, y_test.target)\n",
    "    \n",
    "    return xgb_clf1, gini_normalized(y_test.target, xgb_clf_pred_proba)\n",
    "\n",
    "xgb_clf1, gini_score = first_xgb(train_complete_df[auto_selected_cols], target)\n",
    "gini_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train mean score: 0.45854585027743716\n",
      "Test mean score : 0.4351141600436971\n",
      "STD Test score: 0.02082592925689721\n",
      "External Test score : 0.3895568600255901\n",
      "Train mean score: 0.46803508118404025\n",
      "Test mean score : 0.43798095084273364\n",
      "STD Test score: 0.025023907806664396\n",
      "External Test score : 0.39428787005655236\n",
      "Train mean score: 0.4717733750138935\n",
      "Test mean score : 0.4401448823511873\n",
      "STD Test score: 0.025913673823062554\n",
      "External Test score : 0.3952011076057549\n",
      "Train mean score: 0.47756343260194567\n",
      "Test mean score : 0.4422434341457315\n",
      "STD Test score: 0.027720228340847912\n",
      "External Test score : 0.4027426428215621\n",
      "Train mean score: 0.47978160832638383\n",
      "Test mean score : 0.44189661777252975\n",
      "STD Test score: 0.029541513160628117\n",
      "External Test score : 0.40242032368654945\n",
      "Train mean score: 0.48419645514493465\n",
      "Test mean score : 0.44703524941377204\n",
      "STD Test score: 0.0282292626003851\n",
      "External Test score : 0.3985610404070988\n",
      "Train mean score: 0.48514431529893587\n",
      "Test mean score : 0.44570593962999033\n",
      "STD Test score: 0.02920834285588766\n",
      "External Test score : 0.3991678305968764\n",
      "Train mean score: 0.4949340632862474\n",
      "Test mean score : 0.45327053728544764\n",
      "STD Test score: 0.02849979209700565\n",
      "External Test score : 0.4064065811707022\n",
      "Train mean score: 0.4961618375573166\n",
      "Test mean score : 0.45221353603722536\n",
      "STD Test score: 0.027891449222438792\n",
      "External Test score : 0.4049134133596397\n",
      "Train mean score: 0.4959546558956376\n",
      "Test mean score : 0.4511847041507311\n",
      "STD Test score: 0.02865406689988079\n",
      "External Test score : 0.4079156207573523\n",
      "Train mean score: 0.4974913284159017\n",
      "Test mean score : 0.4499725599079212\n",
      "STD Test score: 0.028844477004482855\n",
      "External Test score : 0.4085370618169032\n",
      "Train mean score: 0.49768677582730464\n",
      "Test mean score : 0.4499677687336486\n",
      "STD Test score: 0.028946187464027332\n",
      "External Test score : 0.40492318060615523\n",
      "Train mean score: 0.49923033332891925\n",
      "Test mean score : 0.4493610875159372\n",
      "STD Test score: 0.028565254260027907\n",
      "External Test score : 0.40498422589687727\n",
      "Train mean score: 0.49993480662044476\n",
      "Test mean score : 0.4513068096679552\n",
      "STD Test score: 0.027033714584358066\n",
      "External Test score : 0.4023604993016419\n",
      "Train mean score: 0.499842016267894\n",
      "Test mean score : 0.45094800541054464\n",
      "STD Test score: 0.027599159562300756\n",
      "External Test score : 0.40356309152886705\n",
      "Train mean score: 0.5002508541553021\n",
      "Test mean score : 0.44851657409523915\n",
      "STD Test score: 0.02639024719023298\n",
      "External Test score : 0.40547625094009737\n",
      "Train mean score: 0.5011003676634301\n",
      "Test mean score : 0.4507729111158847\n",
      "STD Test score: 0.028199796071928233\n",
      "External Test score : 0.4066141351591574\n",
      "Train mean score: 0.5012561348839568\n",
      "Test mean score : 0.4485253393563239\n",
      "STD Test score: 0.027011574945148942\n",
      "External Test score : 0.4065530898684353\n",
      "Train mean score: 0.5020524008152566\n",
      "Test mean score : 0.449303186478177\n",
      "STD Test score: 0.026465847144491055\n",
      "External Test score : 0.4071049392965629\n",
      "Train mean score: 0.5026250002531312\n",
      "Test mean score : 0.44805844650912696\n",
      "STD Test score: 0.029313863351948584\n",
      "External Test score : 0.40519544260277596\n",
      "Train mean score: 0.5035832461238672\n",
      "Test mean score : 0.44786372313107164\n",
      "STD Test score: 0.028604322391815904\n",
      "External Test score : 0.40627350243692795\n",
      "Train mean score: 0.5024223176246092\n",
      "Test mean score : 0.4479060535369778\n",
      "STD Test score: 0.028700042304821795\n",
      "External Test score : 0.403355537540412\n",
      "Train mean score: 0.503083975335932\n",
      "Test mean score : 0.44910669147123566\n",
      "STD Test score: 0.026197820910813865\n",
      "External Test score : 0.4060451930496273\n",
      "Train mean score: 0.5031386827965286\n",
      "Test mean score : 0.4472282257452352\n",
      "STD Test score: 0.027174113470640707\n",
      "External Test score : 0.4050098649189808\n",
      "Train mean score: 0.5049210089611554\n",
      "Test mean score : 0.447832287397038\n",
      "STD Test score: 0.025566006897279694\n",
      "External Test score : 0.40370105388589894\n",
      "Train mean score: 0.5052384050098238\n",
      "Test mean score : 0.44632078502910677\n",
      "STD Test score: 0.028343813532749278\n",
      "External Test score : 0.4022945703876621\n",
      "Train mean score: 0.5053289542883\n",
      "Test mean score : 0.44634138858140615\n",
      "STD Test score: 0.02829181903779877\n",
      "External Test score : 0.4018855669398239\n",
      "Train mean score: 0.5058170621472743\n",
      "Test mean score : 0.44840379743686604\n",
      "STD Test score: 0.026039808992327967\n",
      "External Test score : 0.403167518044988\n",
      "Train mean score: 0.5057947930409912\n",
      "Test mean score : 0.4468978732416965\n",
      "STD Test score: 0.026588247904482703\n",
      "External Test score : 0.4022799195178887\n",
      "Train mean score: 0.5063147671112043\n",
      "Test mean score : 0.4453498940049059\n",
      "STD Test score: 0.026281376548829918\n",
      "External Test score : 0.40222253694460997\n",
      "Train mean score: 0.5061999049626655\n",
      "Test mean score : 0.44543618661859574\n",
      "STD Test score: 0.024871366585867576\n",
      "External Test score : 0.40299414941933714\n",
      "Train mean score: 0.5067428318406157\n",
      "Test mean score : 0.4462519377818429\n",
      "STD Test score: 0.02715164446485069\n",
      "External Test score : 0.40429319320590323\n",
      "Train mean score: 0.5067447747367657\n",
      "Test mean score : 0.44693505861607685\n",
      "STD Test score: 0.025457919873558495\n",
      "External Test score : 0.4053309631481788\n",
      "Train mean score: 0.5069189361415668\n",
      "Test mean score : 0.4464279643782542\n",
      "STD Test score: 0.02762039922513237\n",
      "External Test score : 0.40416988171864465\n",
      "Train mean score: 0.5072578672024379\n",
      "Test mean score : 0.44734383329205835\n",
      "STD Test score: 0.026113951434756394\n",
      "External Test score : 0.4026693884726957\n",
      "Train mean score: 0.506848140716572\n",
      "Test mean score : 0.44628907432629517\n",
      "STD Test score: 0.02558612069835589\n",
      "External Test score : 0.40488044890264996\n",
      "Train mean score: 0.5073205833135713\n",
      "Test mean score : 0.4467835069485984\n",
      "STD Test score: 0.026707773415400097\n",
      "External Test score : 0.40201498295615473\n",
      "Train mean score: 0.5080721746095713\n",
      "Test mean score : 0.4460868660048227\n",
      "STD Test score: 0.026985429245205174\n",
      "External Test score : 0.4040978482755926\n",
      "Train mean score: 0.5080366669518742\n",
      "Test mean score : 0.4454255173249825\n",
      "STD Test score: 0.028409210358710527\n",
      "External Test score : 0.40774957756658803\n",
      "Train mean score: 0.5081174874344285\n",
      "Test mean score : 0.4459893678201743\n",
      "STD Test score: 0.027239904229278064\n",
      "External Test score : 0.4051197464422804\n",
      "Train mean score: 0.5076824470604423\n",
      "Test mean score : 0.44628801664876017\n",
      "STD Test score: 0.027697227411739106\n",
      "External Test score : 0.4039904085639217\n",
      "Train mean score: 0.5082785813827349\n",
      "Test mean score : 0.4456612142454205\n",
      "STD Test score: 0.03003114450269427\n",
      "External Test score : 0.402996591230966\n",
      "Train mean score: 0.5080799126648546\n",
      "Test mean score : 0.44532564795294965\n",
      "STD Test score: 0.02675611168227938\n",
      "External Test score : 0.4042467987849545\n",
      "Train mean score: 0.5093657333047058\n",
      "Test mean score : 0.44521406137575414\n",
      "STD Test score: 0.028174569400644292\n",
      "External Test score : 0.40554095894826286\n",
      "Train mean score: 0.5085662103110649\n",
      "Test mean score : 0.4463338977662281\n",
      "STD Test score: 0.026829636148807047\n",
      "External Test score : 0.403556986999795\n",
      "Train mean score: 0.5093076328236803\n",
      "Test mean score : 0.4458450366843353\n",
      "STD Test score: 0.027077396923676562\n",
      "External Test score : 0.4048071945537833\n",
      "Train mean score: 0.5094154835303519\n",
      "Test mean score : 0.4452085312419059\n",
      "STD Test score: 0.027556769057609592\n",
      "External Test score : 0.4019856812166081\n",
      "Train mean score: 0.5097770252002405\n",
      "Test mean score : 0.4444916038817614\n",
      "STD Test score: 0.02677387553145781\n",
      "External Test score : 0.40497201683873296\n",
      "Train mean score: 0.5092941195302416\n",
      "Test mean score : 0.44509336465519167\n",
      "STD Test score: 0.026954152439804032\n",
      "External Test score : 0.40477300919097897\n",
      "Train mean score: 0.5099251184507941\n",
      "Test mean score : 0.4449033726993975\n",
      "STD Test score: 0.02794330102841513\n",
      "External Test score : 0.4036326831602902\n",
      "Train mean score: 0.5100870498818241\n",
      "Test mean score : 0.44434214335214295\n",
      "STD Test score: 0.027967846930681554\n",
      "External Test score : 0.4054164265551898\n",
      "Train mean score: 0.5095451444075556\n",
      "Test mean score : 0.4449178008934803\n",
      "STD Test score: 0.027848686226643903\n",
      "External Test score : 0.40427610052450114\n",
      "Train mean score: 0.5103255433416217\n",
      "Test mean score : 0.44650317993040317\n",
      "STD Test score: 0.02754580999055198\n",
      "External Test score : 0.405004981295723\n",
      "Train mean score: 0.509967553903152\n",
      "Test mean score : 0.4445793256150985\n",
      "STD Test score: 0.02696506453746808\n",
      "External Test score : 0.40498056317943415\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train mean score: 0.510633955230237\n",
      "Test mean score : 0.44434338341934654\n",
      "STD Test score: 0.027057822070249163\n",
      "External Test score : 0.4062417588857524\n",
      "Train mean score: 0.5105262093495442\n",
      "Test mean score : 0.4445515632302836\n",
      "STD Test score: 0.025859637774614655\n",
      "External Test score : 0.4070268013244387\n",
      "Train mean score: 0.5109535807669733\n",
      "Test mean score : 0.4449326212177443\n",
      "STD Test score: 0.02763894145001917\n",
      "External Test score : 0.40552142445523176\n",
      "Train mean score: 0.5102393200688218\n",
      "Test mean score : 0.44685855690492315\n",
      "STD Test score: 0.02879087234758321\n",
      "External Test score : 0.40571066485647034\n",
      "Train mean score: 0.5109870136940173\n",
      "Test mean score : 0.44534612652497263\n",
      "STD Test score: 0.02654207538909189\n",
      "External Test score : 0.40444214371526516\n",
      "Train mean score: 0.5107088245690277\n",
      "Test mean score : 0.445558506957079\n",
      "STD Test score: 0.02592823579976125\n",
      "External Test score : 0.4048657980328765\n",
      "Train mean score: 0.5107387312970312\n",
      "Test mean score : 0.4438709322964424\n",
      "STD Test score: 0.026033447020492345\n",
      "External Test score : 0.40573752478438807\n",
      "Train mean score: 0.511654017309291\n",
      "Test mean score : 0.4449129495716891\n",
      "STD Test score: 0.02623333570309625\n",
      "External Test score : 0.4068387818290147\n",
      "Train mean score: 0.5104355967789064\n",
      "Test mean score : 0.44528086826219837\n",
      "STD Test score: 0.02733215497623649\n",
      "External Test score : 0.40403069845579836\n",
      "Train mean score: 0.5109204112524415\n",
      "Test mean score : 0.4441781960325282\n",
      "STD Test score: 0.026541308353150245\n",
      "External Test score : 0.4044812127013272\n",
      "Train mean score: 0.510613241223173\n",
      "Test mean score : 0.445510069159348\n",
      "STD Test score: 0.028368620142367705\n",
      "External Test score : 0.4059841477589054\n",
      "Train mean score: 0.5113525964571883\n",
      "Test mean score : 0.445403178834696\n",
      "STD Test score: 0.027164633549599644\n",
      "External Test score : 0.402496019847045\n",
      "Train mean score: 0.5102603372978063\n",
      "Test mean score : 0.4455128890952908\n",
      "STD Test score: 0.026495518846796757\n",
      "External Test score : 0.40438109842454306\n",
      "Train mean score: 0.5114240328063312\n",
      "Test mean score : 0.44607659860737625\n",
      "STD Test score: 0.028918370036342355\n",
      "External Test score : 0.40520398894347687\n",
      "Train mean score: 0.5112308688013931\n",
      "Test mean score : 0.44588072107845156\n",
      "STD Test score: 0.025993132413603695\n",
      "External Test score : 0.4053273004307356\n",
      "Train mean score: 0.5102137672270886\n",
      "Test mean score : 0.44611690425978556\n",
      "STD Test score: 0.02673973968780531\n",
      "External Test score : 0.40937216139398125\n",
      "Train mean score: 0.5117947858100332\n",
      "Test mean score : 0.4453217945566821\n",
      "STD Test score: 0.027917901233779414\n",
      "External Test score : 0.40362047410214597\n",
      "Train mean score: 0.5104161191837064\n",
      "Test mean score : 0.4453587811126331\n",
      "STD Test score: 0.02453264140800703\n",
      "External Test score : 0.40730516785013127\n",
      "Train mean score: 0.5109690876648726\n",
      "Test mean score : 0.4431422150795041\n",
      "STD Test score: 0.02817531509642173\n",
      "External Test score : 0.402828106228573\n",
      "Train mean score: 0.5118711826885585\n",
      "Test mean score : 0.44518737306681155\n",
      "STD Test score: 0.027532545338100185\n",
      "External Test score : 0.40724412255940917\n",
      "Train mean score: 0.5114953014284833\n",
      "Test mean score : 0.44356520352381645\n",
      "STD Test score: 0.02742934665403955\n",
      "External Test score : 0.4051759081097448\n",
      "Train mean score: 0.5119330670480684\n",
      "Test mean score : 0.4441157510733452\n",
      "STD Test score: 0.0279594558731604\n",
      "External Test score : 0.40646762646142426\n",
      "Train mean score: 0.5113063704925966\n",
      "Test mean score : 0.4455407795940163\n",
      "STD Test score: 0.026879887579205404\n",
      "External Test score : 0.40571554847972807\n",
      "Train mean score: 0.5113603679914781\n",
      "Test mean score : 0.4435232371366564\n",
      "STD Test score: 0.027593515778758158\n",
      "External Test score : 0.40712447378959404\n",
      "Train mean score: 0.5117354068037548\n",
      "Test mean score : 0.4443568289301448\n",
      "STD Test score: 0.02733706057808298\n",
      "External Test score : 0.40549822724475737\n",
      "Train mean score: 0.5117140921002241\n",
      "Test mean score : 0.4449444696704517\n",
      "STD Test score: 0.02693080933049929\n",
      "External Test score : 0.4051698035806725\n",
      "Train mean score: 0.5118488287507714\n",
      "Test mean score : 0.4446254953615546\n",
      "STD Test score: 0.026846191882398996\n",
      "External Test score : 0.40641634841721763\n",
      "Train mean score: 0.5115589536560294\n",
      "Test mean score : 0.44392348479900845\n",
      "STD Test score: 0.027692112409277814\n",
      "External Test score : 0.40617460906595837\n",
      "Train mean score: 0.5114930988557128\n",
      "Test mean score : 0.44317557048381273\n",
      "STD Test score: 0.027536794787381084\n",
      "External Test score : 0.40600734496937974\n",
      "Train mean score: 0.5116345707796162\n",
      "Test mean score : 0.4432389910984213\n",
      "STD Test score: 0.028498625051268937\n",
      "External Test score : 0.40743458386646225\n",
      "Train mean score: 0.511737961232627\n",
      "Test mean score : 0.44417131256429776\n",
      "STD Test score: 0.029168112476205623\n",
      "External Test score : 0.40615263276129826\n",
      "Train mean score: 0.5123115566159518\n",
      "Test mean score : 0.44456363587472864\n",
      "STD Test score: 0.026649122440402562\n",
      "External Test score : 0.4033005967787622\n",
      "Train mean score: 0.5115012595379548\n",
      "Test mean score : 0.442852585762288\n",
      "STD Test score: 0.027664332984503427\n",
      "External Test score : 0.40490730883056747\n",
      "Train mean score: 0.5117856208098768\n",
      "Test mean score : 0.44459671357213254\n",
      "STD Test score: 0.027090665281035344\n",
      "External Test score : 0.4060110076868229\n",
      "Train mean score: 0.5116721172074064\n",
      "Test mean score : 0.4455292393022682\n",
      "STD Test score: 0.027443595508840096\n",
      "External Test score : 0.4026156686168601\n",
      "Train mean score: 0.5118400327570996\n",
      "Test mean score : 0.44435053951373515\n",
      "STD Test score: 0.02843376996953823\n",
      "External Test score : 0.4043701102722131\n",
      "Train mean score: 0.5121372864268227\n",
      "Test mean score : 0.44368212573658666\n",
      "STD Test score: 0.02725204571496161\n",
      "External Test score : 0.4073857476338845\n",
      "Train mean score: 0.5114634755381523\n",
      "Test mean score : 0.4443503317203348\n",
      "STD Test score: 0.02638062071489489\n",
      "External Test score : 0.40682168914761235\n",
      "Train mean score: 0.5121507822379195\n",
      "Test mean score : 0.44444311217335625\n",
      "STD Test score: 0.028353401691974436\n",
      "External Test score : 0.40559223699246955\n",
      "Train mean score: 0.5124871318130528\n",
      "Test mean score : 0.4433522305914945\n",
      "STD Test score: 0.027343594390404163\n",
      "External Test score : 0.4064932654835275\n"
     ]
    }
   ],
   "source": [
    "# For various features number took among the feature importance list produced with \"auto_selected_cols\", \n",
    "# fit and evaluate models performances\n",
    "nb_feat_mean_train_scores = list()\n",
    "nb_feat_mean_test_scores=list()\n",
    "nb_feat_ext_test_scores = list()\n",
    "x_values = range(3,len(auto_selected_cols))\n",
    "\n",
    "for i in x_values:\n",
    "    # Define the current set of features\n",
    "    list_var = list(xgb_feature_importances[:i].index)    \n",
    "      \n",
    "    \n",
    "    # Train and get scores\n",
    "    std, mean_train, mean_test, ext_test_score, xgb_trained, xgb_feat_imp = double_split_train_test(xgb_clf1, train_complete_df[list_var], target, outliers_idx, nb_CV = 5, print_scores=True)\n",
    "    nb_feat_mean_train_scores.append(mean_train)\n",
    "    nb_feat_mean_test_scores.append(mean_test)\n",
    "    nb_feat_ext_test_scores.append(ext_test_score)\n",
    "\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_scores(nb_feat_mean_train_scores, nb_feat_mean_test_scores, nb_feat_ext_test_scores, \"XGBoost score / Features Nb\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we do not observe a huge overfitting we will to control low importance features with regularization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "optim_feat_nb = train_complete_df.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 3 candidates, totalling 9 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   4 out of   9 | elapsed:   32.0s remaining:   40.0s\n",
      "[Parallel(n_jobs=-1)]: Done   9 out of   9 | elapsed:   50.8s remaining:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done   9 out of   9 | elapsed:   50.8s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "       colsample_bytree=0.8, eval_metric='auc',\n",
      "       eval_set=[(       superficief  EXPO  ft_21_categ_4     Age  Pop_rate_per_Menage  \\\n",
      "3396       750.000 0.997              1  36.000                2.271\n",
      "8758     1,220.000 1.000              0  55.000                2.270\n",
      "6804     2,039.000 1.000              0  43.000                2.206\n",
      "4... 0\n",
      "254      0\n",
      "1883     0\n",
      "6446     0\n",
      "22       0\n",
      "1016     0\n",
      "Name: target, Length: 3069, dtype: int64)],\n",
      "       gamma=0, learning_rate=0.005, max_delta_step=0, max_depth=4,\n",
      "       min_child_weight=1, missing=9999999999, n_estimators=600, n_jobs=1,\n",
      "       nthread=None, objective='binary:logistic', random_state=0,\n",
      "       reg_alpha=0.05, reg_lambda=1, scale_pos_weight=2, seed=None,\n",
      "       silent=True, subsample=0.4)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2072  309]\n",
      " [ 432  256]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.4058938007286365"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First hyperparameters exploration\n",
    "def hyperparams_research(train_complete_df, target):\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(train_complete_df, target, test_size=0.30, random_state=41)\n",
    "    y_train_s = y_train.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "    y_test_s = y_test.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "    \n",
    "    \n",
    "    eval_set = [(X_test[auto_selected_cols[:optim_feat_nb]],y_test.target)]\n",
    "    xgb_clf = xgb.XGBClassifier(booster='gbtree', missing=9999999999, \n",
    "                             eval_metric=\"auc\", eval_set=eval_set)\n",
    "\n",
    "    params={\n",
    "    'max_depth': [4], \n",
    "    'subsample': [0.4],         # Boosting sample size\n",
    "    'colsample_bytree': [ 0.8 ], # Sample columns ratio by tree\n",
    "    'n_estimators': [600], \n",
    "    'scale_pos_weight' : [2],\n",
    "    'learning_rate' : [0.005],\n",
    "    'reg_alpha' : [0.05],\n",
    "    'reg_lambda': [0.05, 0.1, 1]\n",
    "    }\n",
    "\n",
    "    rs = GridSearchCV(xgb_clf,\n",
    "                  params,\n",
    "                  cv=3,\n",
    "                  scoring=\"roc_auc\",\n",
    "                  n_jobs=-1, \n",
    "                  verbose=2,\n",
    "                  return_train_score=True)\n",
    "    rs.fit(X_train[auto_selected_cols[:optim_feat_nb]], y_train_s)\n",
    "    best_est = rs.best_estimator_\n",
    "    print(best_est)\n",
    "\n",
    "    xgb_clf_pred_proba = rs.predict_proba(X_test[auto_selected_cols[:optim_feat_nb]])[:, 1]\n",
    "    # Display ROD Curve\n",
    "    fpr, tpr, _ = metrics.roc_curve(y_test.target, xgb_clf_pred_proba)\n",
    "    plt.plot(fpr,tpr)\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "    plt.title(\"ROC Curve\")\n",
    "    plt.show()\n",
    "    \n",
    "    # Display confusion matrix\n",
    "    analyze_model(xgb_clf_pred_proba, y_test.target)\n",
    "    \n",
    "    return gini_normalized(y_test.target, xgb_clf_pred_proba)\n",
    "\n",
    "\n",
    "\n",
    "hyperparams_research(train_complete_df, target)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test mean score :0.4390492905341261\n",
      "External test score :0.4281902131152732\n"
     ]
    }
   ],
   "source": [
    "# AUC score\n",
    "cv_results_df = pd.DataFrame(rs.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "#print(cv_results_df.mean_train_score)\n",
    "print(\"Test mean score :\" + str(2*max(cv_results_df.mean_test_score)-1))\n",
    "\n",
    "print(\"External test score :\" +str(gini_normalized(y_test.target, xgb_clf_pred_proba)))\n",
    "# 0.4383   0.4325"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2061  312]\n",
      " [ 417  275]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prepare submission file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xgboost import plot_importance\n",
    "\n",
    "# Remove outliers\n",
    "train_complete_df.drop(outliers_idx) \n",
    "y_train.drop(outliers_idx)\n",
    "    \n",
    "\n",
    "xgb_clf = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "       colsample_bytree=0.8, gamma=0, learning_rate=0.005,\n",
    "       max_delta_step=0, max_depth=4, min_child_weight=1,\n",
    "       missing=9999999999, n_estimators=600, n_jobs=1, nthread=None,\n",
    "       objective='binary:logistic', random_state=0, reg_alpha=0,\n",
    "       reg_lambda=1, scale_pos_weight=2, seed=None, silent=True,\n",
    "       subsample=0.4)\n",
    "\n",
    "xgb_clf.fit(train_complete_df[auto_selected_cols[:optim_feat_nb]], target_s)\n",
    "\n",
    "# plot feature importance\n",
    "plot_importance(xgb_clf, max_num_features=30)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict and save result\n",
    "model_pred = xgb_clf.predict_proba(test_complete_df[auto_selected_cols[:optim_feat_nb]])[:,1]\n",
    "model_pred_df = pd.DataFrame({\"target\":model_pred})\n",
    "model_pred_df.to_csv(\"./lmartin_submission.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analyze the best models\n",
    "Identify common points, differences ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 678,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model number 1\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.005, 'subsample': 0.4}]\n",
      "model number 2\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.005, 'subsample': 0.6}]\n",
      "model number 3\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.005, 'subsample': 0.7}]\n",
      "model number 4\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.01, 'subsample': 0.4}]\n",
      "model number 5\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.01, 'subsample': 0.6}]\n"
     ]
    }
   ],
   "source": [
    "import operator\n",
    "\n",
    "#return the n best models found thanks to gridsearch\n",
    "def get_n_best_params(v_gridSearch, nb_best_models):\n",
    "    cv_results_df = pd.DataFrame(v_gridSearch.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "    \n",
    "    # Look at the best params\n",
    "    index_list = sorted(range(len(cv_results_df['mean_test_score'])), key=lambda i: cv_results_df['mean_test_score'][i], reverse=True)[:nb_best_models]    \n",
    "    \n",
    "    for i in range(1, nb_best_models+1):\n",
    "        print(\"model number {}\".format(i))\n",
    "        print(cv_results_df.iloc[i-1:i,:][\"params\"].values)\n",
    "    \n",
    "    return cv_results_df.iloc[index_list,:][\"mean_test_score\"], cv_results_df.iloc[index_list,:][\"params\"]\n",
    "\n",
    "\n",
    "best_scores_list, best_params_list = get_n_best_params(rs, 5)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Saved models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model number 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([{'colsample_bytree': 0.6, 'lambda': 0, 'learning_rate': 0.02, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.005, 'subsample': 0.6}],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 664,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Params model #1    \n",
    "cv_results_df = pd.DataFrame(rs.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "idx = sorted(range(len(cv_results_df['mean_test_score'])), key=lambda i: cv_results_df['mean_test_score'][i], reverse=True)[0:1]    \n",
    "cv_results_df.iloc[idx,:][\"params\"].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 909,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40810852387603413"
      ]
     },
     "execution_count": 909,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gini perf model #1\n",
    "xgb_clf2 = xgb.XGBClassifier(\n",
    "       colsample_bytree=0.6,  learning_rate=0.02, \n",
    "       max_depth=2, missing=9999999999,\n",
    "       n_estimators=600, n_jobs=-1, \n",
    "       objective='binary:logistic', \n",
    "       reg_alpha=0.005,\n",
    "       tree_method = 'gpu_hist',\n",
    "       random_state = 43,\n",
    "       subsample=0.6)\n",
    "\n",
    "xgb_clf2.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf2_pred_proba = xgb_clf2.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf2_pred_proba)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 910,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2290   91]\n",
      " [ 572  116]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf2_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model number 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 911,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split0_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split1_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split2_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split3_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split4_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('mean_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('std_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([], dtype=object)"
      ]
     },
     "execution_count": 911,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Params model #2\n",
    "cv_results_df = pd.DataFrame(rs.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "idx = sorted(range(len(cv_results_df['mean_test_score'])), key=lambda i: cv_results_df['mean_test_score'][i], reverse=True)[1:2]    \n",
    "cv_results_df.iloc[idx,:][\"params\"].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 937,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4099752888663156"
      ]
     },
     "execution_count": 937,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gini perf model #2\n",
    "xgb_clf2 = xgb.XGBClassifier(\n",
    "       colsample_bytree=0.6,  \n",
    "       learning_rate=0.02, \n",
    "       max_depth=2, missing=9999999999,\n",
    "       n_estimators=600, n_jobs=-1, \n",
    "       objective='binary:logistic', \n",
    "       reg_alpha=0.005,\n",
    "       reg_lambda = 0.02,\n",
    "       tree_method = 'gpu_hist',\n",
    "       random_state = 43,\n",
    "       subsample=0.6)\n",
    "\n",
    "xgb_clf2.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf2_pred_proba = xgb_clf2.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf2_pred_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 938,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2294   87]\n",
      " [ 570  118]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf2_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model number 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 914,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([], dtype=object)"
      ]
     },
     "execution_count": 914,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Params model #3\n",
    "cv_results_df = pd.DataFrame(rs.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "idx = sorted(range(len(cv_results_df['mean_test_score'])), key=lambda i: cv_results_df['mean_test_score'][i], reverse=True)[2:3]    \n",
    "cv_results_df.iloc[idx,:][\"params\"].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 915,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4078582381840736"
      ]
     },
     "execution_count": 915,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gini perf model #3\n",
    "xgb_clf3 = xgb.XGBClassifier(\n",
    "       colsample_bytree=0.5,  \n",
    "       learning_rate=0.02, \n",
    "       max_depth=2, missing=9999999999,\n",
    "       n_estimators=600, n_jobs=-1, \n",
    "       objective='binary:logistic', \n",
    "       reg_alpha=0.005,\n",
    "       reg_lambda = 0,\n",
    "       tree_method = 'gpu_hist',\n",
    "       random_state = 43,\n",
    "       subsample=0.7)\n",
    "\n",
    "xgb_clf3.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf3_pred_proba = xgb_clf3.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf3_pred_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 916,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xgboost import plot_importance\n",
    "\n",
    "\n",
    "# plot feature importance\n",
    "plot_importance(xgb_clf3, max_num_features=30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 917,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2298   83]\n",
      " [ 579  109]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf3_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model number 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 918,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40853339909945985"
      ]
     },
     "execution_count": 918,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "xgb_clf4 = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "       colsample_bytree=0.4, gamma=0, learning_rate=0.005,\n",
    "       max_delta_step=0, max_depth=3, min_child_weight=1,\n",
    "       missing=9999999999, n_estimators=1000, n_jobs=1, nthread=None,\n",
    "       objective='binary:logistic', random_state=0, reg_alpha=0,\n",
    "       reg_lambda=1, scale_pos_weight=4, seed=None, silent=True,\n",
    "       subsample=0.5, tree_method='gpu_hist')\n",
    "\n",
    "xgb_clf4.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf4_pred_proba = xgb_clf4.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf4_pred_proba)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 919,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[1480  901]\n",
      " [ 221  467]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf4_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 920,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot feature importance\n",
    "plot_importance(xgb_clf4, max_num_features=35)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Locate errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1065,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to enumerate pred val and real val for a given department and the error rate obtained\n",
    "def analyze_pred_real_values(pred_proba, pred_value, real_value):\n",
    "    # Transform predictions to input uniform data into the confusion matrix function\n",
    "    y_pred = [0 if x < 0.5 else 1 for x in pred_proba]\n",
    "    \n",
    "    # Predicted Positive List\n",
    "    pred_val_indexes_list = [i for i, x in enumerate(y_pred) if x == pred_value] \n",
    "    all_real_pred_val_df = y_test.iloc[pred_val_indexes_list]\n",
    "    \n",
    "    # Search Predicted : pred_value but real_value for real\n",
    "    real_val_pred_val_df = all_real_pred_val_df[all_real_pred_val_df[\"target\"] == real_value]\n",
    "    \n",
    "    # Get full False Positive X_test data\n",
    "    X_test_real_val_pred_val = X_test[X_test.index.isin(real_val_pred_val_df.index.values)]\n",
    "    \n",
    "    # Add CODGEO to X_test dataframe \n",
    "    CODGEO_df = pd.DataFrame(CODGEO[X_test.index])\n",
    "    CODGEO_df.columns = [[\"CODGEO\"]]\n",
    "    X_test_real_val_pred_val[\"CODGEO\"] = CODGEO_df.loc[X_test.index,\"CODGEO\"].copy()\n",
    "    \n",
    "    # Evaluate error ratio per Deprtment\n",
    "    CODGEO_SUMDEP = CODGEO.str[:2].value_counts().rename_axis('DEP').reset_index(name='Nb_ROW_per_DEP')\n",
    "    X_test_CODGEO_SUMDEP = X_test_real_val_pred_val[\"CODGEO\"].str[:2].value_counts().rename_axis('X_DEP').reset_index(name='X_Nb_Error_per_DEP')\n",
    "    X_test_CODGEO_SUMDEP = X_test_CODGEO_SUMDEP.merge(CODGEO_SUMDEP, how='left', left_on='X_DEP', right_on='DEP', right_index=False)\n",
    "    del X_test_CODGEO_SUMDEP[\"DEP\"]\n",
    "    X_test_CODGEO_SUMDEP[\"Error_ratio\"] = X_test_CODGEO_SUMDEP[\"X_Nb_Error_per_DEP\"]/X_test_CODGEO_SUMDEP[\"Nb_ROW_per_DEP\"]\n",
    "    return X_test_CODGEO_SUMDEP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1071,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False Negatives\n",
      "570\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X_DEP</th>\n",
       "      <th>X_Nb_Error_per_DEP</th>\n",
       "      <th>Nb_ROW_per_DEP</th>\n",
       "      <th>Error_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>36</td>\n",
       "      <td>8</td>\n",
       "      <td>49</td>\n",
       "      <td>0.163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>49</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>02</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>85</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>26</td>\n",
       "      <td>0.115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2B</td>\n",
       "      <td>15</td>\n",
       "      <td>131</td>\n",
       "      <td>0.115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>62</td>\n",
       "      <td>0.113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>09</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>82</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94</td>\n",
       "      <td>25</td>\n",
       "      <td>277</td>\n",
       "      <td>0.090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>54</td>\n",
       "      <td>12</td>\n",
       "      <td>134</td>\n",
       "      <td>0.090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>57</td>\n",
       "      <td>9</td>\n",
       "      <td>107</td>\n",
       "      <td>0.084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>0.083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0.083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>29</td>\n",
       "      <td>8</td>\n",
       "      <td>98</td>\n",
       "      <td>0.082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>68</td>\n",
       "      <td>10</td>\n",
       "      <td>126</td>\n",
       "      <td>0.079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>44</td>\n",
       "      <td>5</td>\n",
       "      <td>63</td>\n",
       "      <td>0.079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2A</td>\n",
       "      <td>9</td>\n",
       "      <td>118</td>\n",
       "      <td>0.076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>64</td>\n",
       "      <td>23</td>\n",
       "      <td>316</td>\n",
       "      <td>0.073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>84</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>0.069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>34</td>\n",
       "      <td>22</td>\n",
       "      <td>320</td>\n",
       "      <td>0.069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>131</td>\n",
       "      <td>0.069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>73</td>\n",
       "      <td>8</td>\n",
       "      <td>119</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>92</td>\n",
       "      <td>29</td>\n",
       "      <td>432</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>31</td>\n",
       "      <td>14</td>\n",
       "      <td>209</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>62</td>\n",
       "      <td>0.065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>26</td>\n",
       "      <td>9</td>\n",
       "      <td>140</td>\n",
       "      <td>0.064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>06</td>\n",
       "      <td>74</td>\n",
       "      <td>1334</td>\n",
       "      <td>0.055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "      <td>236</td>\n",
       "      <td>0.055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>148</td>\n",
       "      <td>0.054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>91</td>\n",
       "      <td>7</td>\n",
       "      <td>138</td>\n",
       "      <td>0.051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>42</td>\n",
       "      <td>12</td>\n",
       "      <td>243</td>\n",
       "      <td>0.049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>38</td>\n",
       "      <td>19</td>\n",
       "      <td>393</td>\n",
       "      <td>0.048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>0.048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>0.048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>66</td>\n",
       "      <td>7</td>\n",
       "      <td>149</td>\n",
       "      <td>0.047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>58</td>\n",
       "      <td>2</td>\n",
       "      <td>43</td>\n",
       "      <td>0.047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>76</td>\n",
       "      <td>5</td>\n",
       "      <td>109</td>\n",
       "      <td>0.046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>3</td>\n",
       "      <td>66</td>\n",
       "      <td>0.045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>77</td>\n",
       "      <td>6</td>\n",
       "      <td>135</td>\n",
       "      <td>0.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "      <td>45</td>\n",
       "      <td>0.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>78</td>\n",
       "      <td>7</td>\n",
       "      <td>158</td>\n",
       "      <td>0.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>0.043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>05</td>\n",
       "      <td>4</td>\n",
       "      <td>95</td>\n",
       "      <td>0.042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>33</td>\n",
       "      <td>12</td>\n",
       "      <td>289</td>\n",
       "      <td>0.042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "      <td>49</td>\n",
       "      <td>0.041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>86</td>\n",
       "      <td>4</td>\n",
       "      <td>100</td>\n",
       "      <td>0.040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>95</td>\n",
       "      <td>4</td>\n",
       "      <td>103</td>\n",
       "      <td>0.039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>62</td>\n",
       "      <td>7</td>\n",
       "      <td>194</td>\n",
       "      <td>0.036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>07</td>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>0.036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>74</td>\n",
       "      <td>10</td>\n",
       "      <td>329</td>\n",
       "      <td>0.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>69</td>\n",
       "      <td>3</td>\n",
       "      <td>100</td>\n",
       "      <td>0.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>90</td>\n",
       "      <td>2</td>\n",
       "      <td>70</td>\n",
       "      <td>0.029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>67</td>\n",
       "      <td>3</td>\n",
       "      <td>117</td>\n",
       "      <td>0.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>59</td>\n",
       "      <td>6</td>\n",
       "      <td>235</td>\n",
       "      <td>0.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>87</td>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "      <td>0.024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>104</td>\n",
       "      <td>0.019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>68 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   X_DEP  X_Nb_Error_per_DEP  Nb_ROW_per_DEP  Error_ratio\n",
       "24    36                   8              49        0.163\n",
       "51    49                   2              14        0.143\n",
       "56    55                   1               7        0.143\n",
       "58    02                   1               7        0.143\n",
       "67    85                   1               7        0.143\n",
       "43    45                   3              26        0.115\n",
       "8     2B                  15             131        0.115\n",
       "29    25                   7              62        0.113\n",
       "57    28                   1               9        0.111\n",
       "66    09                   1               9        0.111\n",
       "61    82                   1              10        0.100\n",
       "4     94                  25             277        0.090\n",
       "11    54                  12             134        0.090\n",
       "18    57                   9             107        0.084\n",
       "36    17                   5              60        0.083\n",
       "62    61                   1              12        0.083\n",
       "26    29                   8              98        0.082\n",
       "17    68                  10             126        0.079\n",
       "35    44                   5              63        0.079\n",
       "20    2A                   9             118        0.076\n",
       "5     64                  23             316        0.073\n",
       "41    84                   4              58        0.069\n",
       "6     34                  22             320        0.069\n",
       "19    35                   9             131        0.069\n",
       "25    73                   8             119        0.067\n",
       "2     92                  29             432        0.067\n",
       "9     31                  14             209        0.067\n",
       "63    37                   1              15        0.067\n",
       "40    10                   4              62        0.065\n",
       "21    26                   9             140        0.064\n",
       "..   ...                 ...             ...          ...\n",
       "0     06                  74            1334        0.055\n",
       "10    21                  13             236        0.055\n",
       "22    14                   8             148        0.054\n",
       "27    91                   7             138        0.051\n",
       "13    42                  12             243        0.049\n",
       "7     38                  19             393        0.048\n",
       "59    71                   1              21        0.048\n",
       "60    46                   1              21        0.048\n",
       "30    66                   7             149        0.047\n",
       "50    58                   2              43        0.047\n",
       "34    76                   5             109        0.046\n",
       "42    43                   3              66        0.045\n",
       "32    77                   6             135        0.044\n",
       "47    56                   2              45        0.044\n",
       "28    78                   7             158        0.044\n",
       "54    15                   1              23        0.043\n",
       "38    05                   4              95        0.042\n",
       "14    33                  12             289        0.042\n",
       "46    27                   2              49        0.041\n",
       "37    86                   4             100        0.040\n",
       "39    95                   4             103        0.039\n",
       "31    62                   7             194        0.036\n",
       "53    07                   1              28        0.036\n",
       "16    74                  10             329        0.030\n",
       "45    69                   3             100        0.030\n",
       "49    90                   2              70        0.029\n",
       "44    67                   3             117        0.026\n",
       "33    59                   6             235        0.026\n",
       "55    87                   1              42        0.024\n",
       "48    51                   2             104        0.019\n",
       "\n",
       "[68 rows x 4 columns]"
      ]
     },
     "execution_count": 1071,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Analyze error related to False negatives\n",
    "X_test_CODGEO_SUMDEP = analyze_pred_real_values(xgb_clf2_pred_proba, pred_value=0, real_value=1)\n",
    "print(\"False Negatives\")\n",
    "print(X_test_CODGEO_SUMDEP[\"X_Nb_Error_per_DEP\"].sum())\n",
    "X_test_CODGEO_SUMDEP.sort_values(['Error_ratio', 'Nb_ROW_per_DEP'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1072,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False Negatives\n",
      "87\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X_DEP</th>\n",
       "      <th>X_Nb_Error_per_DEP</th>\n",
       "      <th>Nb_ROW_per_DEP</th>\n",
       "      <th>Error_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0.029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>06</td>\n",
       "      <td>29</td>\n",
       "      <td>1334</td>\n",
       "      <td>0.022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>26</td>\n",
       "      <td>3</td>\n",
       "      <td>140</td>\n",
       "      <td>0.021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>86</td>\n",
       "      <td>2</td>\n",
       "      <td>100</td>\n",
       "      <td>0.020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>78</td>\n",
       "      <td>3</td>\n",
       "      <td>158</td>\n",
       "      <td>0.019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>84</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>0.017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2A</td>\n",
       "      <td>2</td>\n",
       "      <td>118</td>\n",
       "      <td>0.017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>0.017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>68</td>\n",
       "      <td>2</td>\n",
       "      <td>126</td>\n",
       "      <td>0.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92</td>\n",
       "      <td>6</td>\n",
       "      <td>432</td>\n",
       "      <td>0.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>148</td>\n",
       "      <td>0.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>66</td>\n",
       "      <td>2</td>\n",
       "      <td>149</td>\n",
       "      <td>0.013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>427</td>\n",
       "      <td>0.012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>63</td>\n",
       "      <td>2</td>\n",
       "      <td>214</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>57</td>\n",
       "      <td>1</td>\n",
       "      <td>107</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>329</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>117</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>503</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>38</td>\n",
       "      <td>3</td>\n",
       "      <td>393</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>131</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>91</td>\n",
       "      <td>1</td>\n",
       "      <td>138</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>94</td>\n",
       "      <td>2</td>\n",
       "      <td>277</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>289</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>320</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>93</td>\n",
       "      <td>1</td>\n",
       "      <td>174</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>194</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>59</td>\n",
       "      <td>1</td>\n",
       "      <td>235</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>243</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>316</td>\n",
       "      <td>0.003</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X_DEP  X_Nb_Error_per_DEP  Nb_ROW_per_DEP  Error_ratio\n",
       "22    45                   1              26        0.038\n",
       "23    40                   1              35        0.029\n",
       "0     06                  29            1334        0.022\n",
       "7     26                   3             140        0.021\n",
       "8     86                   2             100        0.020\n",
       "4     78                   3             158        0.019\n",
       "28    84                   1              58        0.017\n",
       "9     2A                   2             118        0.017\n",
       "27    17                   1              60        0.017\n",
       "10    68                   2             126        0.016\n",
       "1     92                   6             432        0.014\n",
       "11    14                   2             148        0.014\n",
       "14    66                   2             149        0.013\n",
       "2     13                   5             427        0.012\n",
       "16    63                   2             214        0.009\n",
       "19    57                   1             107        0.009\n",
       "5     74                   3             329        0.009\n",
       "17    67                   1             117        0.009\n",
       "3     83                   4             503        0.008\n",
       "6     38                   3             393        0.008\n",
       "25    35                   1             131        0.008\n",
       "29    91                   1             138        0.007\n",
       "15    94                   2             277        0.007\n",
       "13    33                   2             289        0.007\n",
       "12    34                   2             320        0.006\n",
       "21    93                   1             174        0.006\n",
       "26    62                   1             194        0.005\n",
       "20    59                   1             235        0.004\n",
       "18    42                   1             243        0.004\n",
       "24    64                   1             316        0.003"
      ]
     },
     "execution_count": 1072,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Analyze error related to False Positives\n",
    "X_test_CODGEO_SUMDEP = analyze_pred_real_values(xgb_clf2_pred_proba, pred_value=1, real_value=0)\n",
    "print(\"False Negatives\")\n",
    "print(X_test_CODGEO_SUMDEP[\"X_Nb_Error_per_DEP\"].sum())\n",
    "X_test_CODGEO_SUMDEP.sort_values(['Error_ratio', 'Nb_ROW_per_DEP'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Benchmark description\n",
    "We launched a fast benchmark with a xgboost model and got a 0.41 NGC score. It is a basic model where all categorical variables are label encoded. Most important variables are superficief, ft_22_categ, EXPO.\n",
    "\n",
    "Parameters for xgboost were found by cross-validation.\n",
    "\n",
    "Metric\n",
    "The metric used for this challenge is the normalized gini coefficient.\n",
    "\n",
    "The goal of this challenge is to build a model that predicts claims order. A model is good if it detects with a higher probability buildings that actually had a claim.\n",
    "\n",
    "To calculate the metric, observations are ordered by decreasing predicted probability. Predictions are only used here to order observations. Thus the relative magnitude of predictions is not used with this scoring method.\n",
    "\n",
    "Kaggle challenge with the same metric: www.kaggle.com/c/porto-seguro-safe-driver-prediction"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "<script>\n",
    "  $(document).ready(function(){\n",
    "      $('div.prompt').hide();\n",
    "  });\n",
    "</script>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1], dtype=int64)"
      ]
     },
     "execution_count": 436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.utils.multiclass import unique_labels\n",
    "unique_labels(y_test.target, [0 if x < 0.5 else 1 for x in rf_pred] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 603,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2296   85]\n",
      " [ 583  105]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rf_pred_proba = CV_rf_reloaded.predict_proba(X_test)[:,1] \n",
    "gini_normalized(y_test.target, rf_pred_proba)\n",
    "y_pred = [0 if x < 0.5 else 1 for x in rf_pred_proba]\n",
    "\n",
    "analyze_model(rf_pred_proba, y_test.target)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Look at the ROC curve to watch the loss</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 604,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "fpr, tpr, _ = metrics.roc_curve(y_test.target,  rf_pred)\n",
    "plt.plot(fpr,tpr)\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "plt.title(\"ROC Curve\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train a XGBoost Classifier model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'xgboost'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-439-1a2ed7e7e395>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# First XGBClassifier\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mxgboost\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mxgb\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0my_train_s\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'target'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m==\u001b[0m\u001b[1;36m0\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0my_test_s\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'target'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m==\u001b[0m\u001b[1;36m0\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'xgboost'"
     ]
    }
   ],
   "source": [
    "# First XGBClassifier \n",
    "import xgboost as xgb\n",
    "\n",
    "y_train_s = y_train.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "y_test_s = y_test.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "\n",
    "xgb_clf1 = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "       colsample_bytree=0.7, gamma=0, learning_rate=0.01, max_delta_step=0,\n",
    "       max_depth=2, min_child_weight=1, missing=9999999999,\n",
    "       n_estimators=1000, n_jobs=1, nthread=None,\n",
    "       objective='binary:logistic', random_state=0, reg_alpha=0.01,\n",
    "       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n",
    "       subsample=0.4)\n",
    "\n",
    "#xgb_clf1.fit(X_train[[\"superficief\" , \"Age\" ,\"EXPO\" , \"ft_2_categ_2012\", \"ft_2_categ_2013\" ,\"ft_2_categ_2014\" ,\"ft_2_categ_2015\",\"NB_RGA_FM\"]], y_train_s)\n",
    "xgb_clf1.fit(X_train, y_train_s)\n",
    "\n",
    "#xgb_clf_pred_proba = xgb_clf1.predict_proba(X_test[[\"superficief\" , \"Age\" ,\"EXPO\" , \"ft_2_categ_2012\", \"ft_2_categ_2013\" ,\"ft_2_categ_2014\" ,\"ft_2_categ_2015\",\"NB_RGA_FM\"]])[:, 1]\n",
    "xgb_clf_pred_proba = xgb_clf1.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf_pred_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EXPO</th>\n",
       "      <th>ft_2_categ_2014</th>\n",
       "      <th>ft_2_categ_2013</th>\n",
       "      <th>ft_2_categ_2015</th>\n",
       "      <th>ft_2_categ_2016</th>\n",
       "      <th>ft_2_categ_2012</th>\n",
       "      <th>ft_4_categ_0</th>\n",
       "      <th>ft_4_categ_1</th>\n",
       "      <th>ft_5_categ_V</th>\n",
       "      <th>ft_5_categ_N</th>\n",
       "      <th>ft_5_categ_O</th>\n",
       "      <th>ft_6_categ_N</th>\n",
       "      <th>ft_6_categ_V</th>\n",
       "      <th>ft_6_categ_O</th>\n",
       "      <th>ft_7_categ_1</th>\n",
       "      <th>ft_7_categ_V</th>\n",
       "      <th>ft_7_categ_2</th>\n",
       "      <th>ft_7_categ_3</th>\n",
       "      <th>ft_8_categ_O</th>\n",
       "      <th>ft_8_categ_V</th>\n",
       "      <th>ft_8_categ_N</th>\n",
       "      <th>ft_9_categ_1</th>\n",
       "      <th>ft_9_categ_V</th>\n",
       "      <th>ft_9_categ_2</th>\n",
       "      <th>ft_9_categ_3</th>\n",
       "      <th>ft_10_categ_O</th>\n",
       "      <th>ft_10_categ_V</th>\n",
       "      <th>ft_10_categ_N</th>\n",
       "      <th>ft_11_categ_N</th>\n",
       "      <th>ft_11_categ_V</th>\n",
       "      <th>ft_11_categ_O</th>\n",
       "      <th>ft_12_categ_N</th>\n",
       "      <th>ft_12_categ_V</th>\n",
       "      <th>ft_12_categ_O</th>\n",
       "      <th>ft_13_categ_N</th>\n",
       "      <th>ft_13_categ_V</th>\n",
       "      <th>ft_13_categ_O</th>\n",
       "      <th>ft_14_categ_N</th>\n",
       "      <th>ft_14_categ_V</th>\n",
       "      <th>ft_14_categ_O</th>\n",
       "      <th>ft_15_categ_AUTRE</th>\n",
       "      <th>ft_15_categ_V</th>\n",
       "      <th>ft_16_categ_IDENTIQUE</th>\n",
       "      <th>ft_16_categ_V</th>\n",
       "      <th>ft_17_categ_V</th>\n",
       "      <th>ft_17_categ_N</th>\n",
       "      <th>ft_17_categ_O</th>\n",
       "      <th>ft_18_categ_base</th>\n",
       "      <th>ft_18_categ_effpi</th>\n",
       "      <th>ft_18_categ_V</th>\n",
       "      <th>ft_18_categ_pi</th>\n",
       "      <th>ft_18_categ_eff</th>\n",
       "      <th>ft_19_categ_2</th>\n",
       "      <th>ft_19_categ_1</th>\n",
       "      <th>ft_21_categ_4</th>\n",
       "      <th>ft_21_categ_2</th>\n",
       "      <th>ft_21_categ_3</th>\n",
       "      <th>ft_21_categ_1</th>\n",
       "      <th>ft_23_categ_0.0</th>\n",
       "      <th>ft_23_categ_0.3</th>\n",
       "      <th>ft_23_categ_0.6</th>\n",
       "      <th>ft_23_categ_V</th>\n",
       "      <th>ft_23_categ_1.0</th>\n",
       "      <th>ft_23_categ_2.0</th>\n",
       "      <th>ft_23_categ_1.5</th>\n",
       "      <th>ft_24_categ_2</th>\n",
       "      <th>ft_24_categ_.</th>\n",
       "      <th>ft_24_categ_4</th>\n",
       "      <th>ft_24_categ_3</th>\n",
       "      <th>ft_24_categ_5</th>\n",
       "      <th>ft_24_categ_8</th>\n",
       "      <th>ft_24_categ__SUP_=10</th>\n",
       "      <th>ft_24_categ_1</th>\n",
       "      <th>ft_24_categ_6</th>\n",
       "      <th>ft_24_categ_7</th>\n",
       "      <th>ft_24_categ_9</th>\n",
       "      <th>superficief</th>\n",
       "      <th>Age</th>\n",
       "      <th>Is_Exposed_M_1</th>\n",
       "      <th>Is_Exposed_M_2</th>\n",
       "      <th>Is_Exposed_M_3</th>\n",
       "      <th>Is_Exposed_M_4</th>\n",
       "      <th>Is_Exposed_M_5</th>\n",
       "      <th>Is_Exposed_M_6</th>\n",
       "      <th>Is_Exposed_M_7</th>\n",
       "      <th>Is_Exposed_M_8</th>\n",
       "      <th>Is_Exposed_M_9</th>\n",
       "      <th>Is_Exposed_M_10</th>\n",
       "      <th>Is_Exposed_M_11</th>\n",
       "      <th>Is_Exposed_M_12</th>\n",
       "      <th>Nb Pharmacies et parfumerie</th>\n",
       "      <th>Dynamique Entrepreneuriale</th>\n",
       "      <th>Dynamique Entrepreneuriale Service et Commerce</th>\n",
       "      <th>Synergie Médicale COMMUNE</th>\n",
       "      <th>Indice Fiscal Partiel</th>\n",
       "      <th>Score Fiscal</th>\n",
       "      <th>Indice Evasion Client</th>\n",
       "      <th>Score Evasion Client</th>\n",
       "      <th>Indice Synergie Médicale</th>\n",
       "      <th>Score Synergie Médicale</th>\n",
       "      <th>REG</th>\n",
       "      <th>Nb Omnipraticiens BV</th>\n",
       "      <th>Nb Infirmiers Libéraux BV</th>\n",
       "      <th>Nb dentistes Libéraux BV</th>\n",
       "      <th>Nb pharmaciens Libéraux BV</th>\n",
       "      <th>Densité Médicale BV</th>\n",
       "      <th>Score équipement de santé BV</th>\n",
       "      <th>Indice Démographique</th>\n",
       "      <th>Score Démographique</th>\n",
       "      <th>Indice Ménages</th>\n",
       "      <th>Score Ménages</th>\n",
       "      <th>Population</th>\n",
       "      <th>Evolution Population</th>\n",
       "      <th>Evolution Pop %</th>\n",
       "      <th>Nb Ménages</th>\n",
       "      <th>Nb Résidences Principales</th>\n",
       "      <th>Nb propriétaire</th>\n",
       "      <th>Nb Logement</th>\n",
       "      <th>Nb Résidences Secondaires</th>\n",
       "      <th>Nb Log Vacants</th>\n",
       "      <th>Nb Occupants Résidence Principale</th>\n",
       "      <th>Nb Femme</th>\n",
       "      <th>Nb Homme</th>\n",
       "      <th>Nb Mineurs</th>\n",
       "      <th>Nb Majeurs</th>\n",
       "      <th>Nb Etudiants</th>\n",
       "      <th>Nb Entreprises Secteur Services</th>\n",
       "      <th>Nb Entreprises Secteur Commerce</th>\n",
       "      <th>Nb Entreprises Secteur Construction</th>\n",
       "      <th>Nb Entreprises Secteur Industrie</th>\n",
       "      <th>Nb Création Enteprises</th>\n",
       "      <th>Nb Création Industrielles</th>\n",
       "      <th>Nb Création Construction</th>\n",
       "      <th>Nb Création Commerces</th>\n",
       "      <th>Nb Création Services</th>\n",
       "      <th>Moyenne Revenus Fiscaux Départementaux</th>\n",
       "      <th>Moyenne Revenus Fiscaux Régionaux</th>\n",
       "      <th>Dep Moyenne Salaires Horaires</th>\n",
       "      <th>Dep Moyenne Salaires Cadre Horaires</th>\n",
       "      <th>Dep Moyenne Salaires Prof Intermédiaire Horaires</th>\n",
       "      <th>Dep Moyenne Salaires Employé Horaires</th>\n",
       "      <th>Dep Moyenne Salaires Ouvrié Horaires</th>\n",
       "      <th>Reg Moyenne Salaires Horaires</th>\n",
       "      <th>Reg Moyenne Salaires Cadre Horaires</th>\n",
       "      <th>Reg Moyenne Salaires Prof Intermédiaire Horaires</th>\n",
       "      <th>Reg Moyenne Salaires Employé Horaires</th>\n",
       "      <th>Reg Moyenne Salaires Ouvrié Horaires</th>\n",
       "      <th>Valeur ajoutée régionale</th>\n",
       "      <th>Score Urbanité</th>\n",
       "      <th>Nb Atifs</th>\n",
       "      <th>Nb Actifs Salariés</th>\n",
       "      <th>Nb Actifs Non Salariés</th>\n",
       "      <th>Nb Logement Secondaire et Occasionnel</th>\n",
       "      <th>Nb Hotel</th>\n",
       "      <th>Capacité Hotel</th>\n",
       "      <th>Nb Camping</th>\n",
       "      <th>Capacité Camping</th>\n",
       "      <th>Taux étudiants</th>\n",
       "      <th>Taux Propriété</th>\n",
       "      <th>Dynamique Démographique INSEE</th>\n",
       "      <th>Capacité Fisc</th>\n",
       "      <th>Capacité Fiscale</th>\n",
       "      <th>Moyenne Revnus fiscaux</th>\n",
       "      <th>Taux Evasion Client</th>\n",
       "      <th>Nb Education, santé, action sociale</th>\n",
       "      <th>Nb Services personnels et domestiques</th>\n",
       "      <th>Nb Santé, action sociale</th>\n",
       "      <th>Nb Industries des biens intermédiaires</th>\n",
       "      <th>Nb de Commerce</th>\n",
       "      <th>Nb de Services aux particuliers</th>\n",
       "      <th>Nb institution de Education, santé, action sociale, administration</th>\n",
       "      <th>PIB Régionnal</th>\n",
       "      <th>Score Croissance Population</th>\n",
       "      <th>Score Croissance Entrepreneuriale</th>\n",
       "      <th>Score VA Région</th>\n",
       "      <th>Score PIB</th>\n",
       "      <th>Orientation Economique_BassinIndustriel</th>\n",
       "      <th>Orientation Economique_BassinRésidentiel</th>\n",
       "      <th>Orientation Economique_BassinUrbain</th>\n",
       "      <th>Orientation Economique_Bassindiversifié</th>\n",
       "      <th>Orientation Economique_BassinsAgroalimentaire</th>\n",
       "      <th>Urbanité Ruralité_Comrurale_INF_2000mhabts</th>\n",
       "      <th>Urbanité Ruralité_Com_INF_50mhabts</th>\n",
       "      <th>Urbanité Ruralité_Comrurale_SUP_2000habts</th>\n",
       "      <th>Urbanité Ruralité_Com_INF_10mhabts</th>\n",
       "      <th>Urbanité Ruralité_Com_INF_200mhabts</th>\n",
       "      <th>Urbanité Ruralité_Com_SUP_200mhabts</th>\n",
       "      <th>NB_RGA_FM</th>\n",
       "      <th>Pop_EAIP_CE</th>\n",
       "      <th>Pop_EAIP_SM</th>\n",
       "      <th>Total</th>\n",
       "      <th>Gliss</th>\n",
       "      <th>Bloc</th>\n",
       "      <th>Coul</th>\n",
       "      <th>Eff</th>\n",
       "      <th>Eros</th>\n",
       "      <th>INT_MAX_CALC</th>\n",
       "      <th>NB_TOTAL</th>\n",
       "      <th>Freq_TGN_1987_2015</th>\n",
       "      <th>Freq_moy_inon_Entre0et1‰</th>\n",
       "      <th>Freq_moy_inon_0</th>\n",
       "      <th>Freq_moy_inon_Entre2et5‰</th>\n",
       "      <th>Freq_moy_inon_Entre5et10‰</th>\n",
       "      <th>Freq_moy_inon_Plusde10‰</th>\n",
       "      <th>Freq_moy_inon_Entre1et2‰</th>\n",
       "      <th>Freq_moy_sech_Entre0et1‰</th>\n",
       "      <th>Freq_moy_sech_0</th>\n",
       "      <th>Freq_moy_sech_Entre1et2‰</th>\n",
       "      <th>Freq_moy_sech_Entre2et5‰</th>\n",
       "      <th>Freq_moy_sech_Entre5et10‰</th>\n",
       "      <th>Freq_moy_sech_Plusde10‰</th>\n",
       "      <th>Freq_moy_sei_0</th>\n",
       "      <th>Freq_moy_sei_Entre0et1‰</th>\n",
       "      <th>Freq_moy_sei_Entre1et2‰</th>\n",
       "      <th>Freq_moy_sei_Plusde10‰</th>\n",
       "      <th>Freq_moy_sei_Entre5et10‰</th>\n",
       "      <th>Freq_moy_sei_Entre2et5‰</th>\n",
       "      <th>Freq_moy_MVT_0</th>\n",
       "      <th>Freq_moy_MVT_Entre0et1‰</th>\n",
       "      <th>Freq_moy_MVT_Entre1et2‰</th>\n",
       "      <th>Freq_moy_MVT_Entre2et5‰</th>\n",
       "      <th>y_clusters_3</th>\n",
       "      <th>y_clusters_1</th>\n",
       "      <th>y_clusters_5</th>\n",
       "      <th>y_clusters_0</th>\n",
       "      <th>y_clusters_7</th>\n",
       "      <th>y_clusters_2</th>\n",
       "      <th>y_clusters_4</th>\n",
       "      <th>y_clusters_6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7825</th>\n",
       "      <td>1.000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3,900.000</td>\n",
       "      <td>32.000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.000</td>\n",
       "      <td>5,680.000</td>\n",
       "      <td>7,647.000</td>\n",
       "      <td>1,820.000</td>\n",
       "      <td>90.281</td>\n",
       "      <td>32.985</td>\n",
       "      <td>13,913.508</td>\n",
       "      <td>5.948</td>\n",
       "      <td>1,829.054</td>\n",
       "      <td>2.412</td>\n",
       "      <td>93.000</td>\n",
       "      <td>12.000</td>\n",
       "      <td>12.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>4,416.965</td>\n",
       "      <td>3.408</td>\n",
       "      <td>5,145.140</td>\n",
       "      <td>3.074</td>\n",
       "      <td>72,454.000</td>\n",
       "      <td>-66.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>34,144.000</td>\n",
       "      <td>34,175.000</td>\n",
       "      <td>17,336.000</td>\n",
       "      <td>53,801.000</td>\n",
       "      <td>16,703.000</td>\n",
       "      <td>2,923.000</td>\n",
       "      <td>71,230.000</td>\n",
       "      <td>75,626.000</td>\n",
       "      <td>66,092.000</td>\n",
       "      <td>82,483.000</td>\n",
       "      <td>59,235.000</td>\n",
       "      <td>4,652.000</td>\n",
       "      <td>2,356.000</td>\n",
       "      <td>3,519.000</td>\n",
       "      <td>768.000</td>\n",
       "      <td>812.000</td>\n",
       "      <td>720.000</td>\n",
       "      <td>34.000</td>\n",
       "      <td>116.000</td>\n",
       "      <td>196.000</td>\n",
       "      <td>374.000</td>\n",
       "      <td>12,288.000</td>\n",
       "      <td>9,262.000</td>\n",
       "      <td>12.579</td>\n",
       "      <td>22.519</td>\n",
       "      <td>12.864</td>\n",
       "      <td>8.836</td>\n",
       "      <td>9.355</td>\n",
       "      <td>11.815</td>\n",
       "      <td>21.835</td>\n",
       "      <td>12.773</td>\n",
       "      <td>8.660</td>\n",
       "      <td>9.207</td>\n",
       "      <td>62,711.264</td>\n",
       "      <td>87.500</td>\n",
       "      <td>26,226.000</td>\n",
       "      <td>21,994.000</td>\n",
       "      <td>4,232.000</td>\n",
       "      <td>16,703.000</td>\n",
       "      <td>70.000</td>\n",
       "      <td>2,506.000</td>\n",
       "      <td>10.000</td>\n",
       "      <td>1,674.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>32.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-915.000</td>\n",
       "      <td>-915.000</td>\n",
       "      <td>10,775.000</td>\n",
       "      <td>112.000</td>\n",
       "      <td>774.000</td>\n",
       "      <td>282.000</td>\n",
       "      <td>764.000</td>\n",
       "      <td>2,892.000</td>\n",
       "      <td>7,609.000</td>\n",
       "      <td>3,241.000</td>\n",
       "      <td>14,267.000</td>\n",
       "      <td>130,177.000</td>\n",
       "      <td>71.311</td>\n",
       "      <td>2.996</td>\n",
       "      <td>23.059</td>\n",
       "      <td>25.040</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>2,353.000</td>\n",
       "      <td>26,884.400</td>\n",
       "      <td>4,599.600</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>6.590</td>\n",
       "      <td>72.000</td>\n",
       "      <td>3.225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1303</th>\n",
       "      <td>1.000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5,500.000</td>\n",
       "      <td>55.000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4.000</td>\n",
       "      <td>4,019.000</td>\n",
       "      <td>5,696.000</td>\n",
       "      <td>1,382.000</td>\n",
       "      <td>106.666</td>\n",
       "      <td>69.608</td>\n",
       "      <td>5,217.565</td>\n",
       "      <td>2.230</td>\n",
       "      <td>1,388.875</td>\n",
       "      <td>1.827</td>\n",
       "      <td>94.000</td>\n",
       "      <td>12.000</td>\n",
       "      <td>12.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>3,221.920</td>\n",
       "      <td>2.486</td>\n",
       "      <td>3,365.347</td>\n",
       "      <td>2.010</td>\n",
       "      <td>52,851.000</td>\n",
       "      <td>1,423.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>22,333.000</td>\n",
       "      <td>22,448.000</td>\n",
       "      <td>9,848.000</td>\n",
       "      <td>29,054.000</td>\n",
       "      <td>3,892.000</td>\n",
       "      <td>2,714.000</td>\n",
       "      <td>51,940.000</td>\n",
       "      <td>55,574.000</td>\n",
       "      <td>47,790.000</td>\n",
       "      <td>62,400.000</td>\n",
       "      <td>40,964.000</td>\n",
       "      <td>3,326.000</td>\n",
       "      <td>2,067.000</td>\n",
       "      <td>2,333.000</td>\n",
       "      <td>458.000</td>\n",
       "      <td>623.000</td>\n",
       "      <td>418.000</td>\n",
       "      <td>35.000</td>\n",
       "      <td>73.000</td>\n",
       "      <td>97.000</td>\n",
       "      <td>213.000</td>\n",
       "      <td>9,666.000</td>\n",
       "      <td>10,943.000</td>\n",
       "      <td>10.789</td>\n",
       "      <td>22.344</td>\n",
       "      <td>12.756</td>\n",
       "      <td>8.467</td>\n",
       "      <td>8.744</td>\n",
       "      <td>10.679</td>\n",
       "      <td>20.992</td>\n",
       "      <td>12.775</td>\n",
       "      <td>8.458</td>\n",
       "      <td>8.725</td>\n",
       "      <td>3,021.411</td>\n",
       "      <td>62.500</td>\n",
       "      <td>19,034.000</td>\n",
       "      <td>16,752.000</td>\n",
       "      <td>2,282.000</td>\n",
       "      <td>3,892.000</td>\n",
       "      <td>27.000</td>\n",
       "      <td>1,340.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>173.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>33.000</td>\n",
       "      <td>-128.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>10,304.500</td>\n",
       "      <td>42.000</td>\n",
       "      <td>593.000</td>\n",
       "      <td>169.000</td>\n",
       "      <td>633.000</td>\n",
       "      <td>30.000</td>\n",
       "      <td>342.000</td>\n",
       "      <td>187.000</td>\n",
       "      <td>828.000</td>\n",
       "      <td>6,358.000</td>\n",
       "      <td>72.131</td>\n",
       "      <td>1.589</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>84.000</td>\n",
       "      <td>25,789.800</td>\n",
       "      <td>394.200</td>\n",
       "      <td>4.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>3.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>5.990</td>\n",
       "      <td>8.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4549</th>\n",
       "      <td>1.000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7,750.000</td>\n",
       "      <td>32.000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000</td>\n",
       "      <td>793.000</td>\n",
       "      <td>1,231.000</td>\n",
       "      <td>391.000</td>\n",
       "      <td>101.071</td>\n",
       "      <td>57.102</td>\n",
       "      <td>10,310.903</td>\n",
       "      <td>4.408</td>\n",
       "      <td>392.945</td>\n",
       "      <td>0.505</td>\n",
       "      <td>91.000</td>\n",
       "      <td>32.000</td>\n",
       "      <td>35.000</td>\n",
       "      <td>18.000</td>\n",
       "      <td>18.000</td>\n",
       "      <td>0.272</td>\n",
       "      <td>4.000</td>\n",
       "      <td>358.093</td>\n",
       "      <td>0.276</td>\n",
       "      <td>401.889</td>\n",
       "      <td>0.240</td>\n",
       "      <td>5,874.000</td>\n",
       "      <td>79.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>2,667.000</td>\n",
       "      <td>2,667.000</td>\n",
       "      <td>1,446.000</td>\n",
       "      <td>19,286.000</td>\n",
       "      <td>16,067.000</td>\n",
       "      <td>552.000</td>\n",
       "      <td>5,680.000</td>\n",
       "      <td>5,962.000</td>\n",
       "      <td>5,536.000</td>\n",
       "      <td>6,655.000</td>\n",
       "      <td>4,843.000</td>\n",
       "      <td>271.000</td>\n",
       "      <td>253.000</td>\n",
       "      <td>683.000</td>\n",
       "      <td>80.000</td>\n",
       "      <td>98.000</td>\n",
       "      <td>182.000</td>\n",
       "      <td>10.000</td>\n",
       "      <td>5.000</td>\n",
       "      <td>69.000</td>\n",
       "      <td>98.000</td>\n",
       "      <td>11,659.000</td>\n",
       "      <td>10,369.000</td>\n",
       "      <td>10.982</td>\n",
       "      <td>20.758</td>\n",
       "      <td>12.452</td>\n",
       "      <td>8.485</td>\n",
       "      <td>9.139</td>\n",
       "      <td>10.910</td>\n",
       "      <td>21.095</td>\n",
       "      <td>12.340</td>\n",
       "      <td>8.453</td>\n",
       "      <td>8.801</td>\n",
       "      <td>26,439.685</td>\n",
       "      <td>37.500</td>\n",
       "      <td>1,872.000</td>\n",
       "      <td>1,474.000</td>\n",
       "      <td>398.000</td>\n",
       "      <td>16,067.000</td>\n",
       "      <td>8.000</td>\n",
       "      <td>274.000</td>\n",
       "      <td>11.000</td>\n",
       "      <td>5,134.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>7.000</td>\n",
       "      <td>-7.000</td>\n",
       "      <td>135.000</td>\n",
       "      <td>135.000</td>\n",
       "      <td>11,014.000</td>\n",
       "      <td>83.000</td>\n",
       "      <td>70.000</td>\n",
       "      <td>36.000</td>\n",
       "      <td>65.000</td>\n",
       "      <td>922.000</td>\n",
       "      <td>3,125.000</td>\n",
       "      <td>1,003.000</td>\n",
       "      <td>5,986.000</td>\n",
       "      <td>57,350.000</td>\n",
       "      <td>71.721</td>\n",
       "      <td>0.931</td>\n",
       "      <td>9.047</td>\n",
       "      <td>10.312</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>6.722</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8274</th>\n",
       "      <td>1.000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3,966.000</td>\n",
       "      <td>40.000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000</td>\n",
       "      <td>466.000</td>\n",
       "      <td>400.000</td>\n",
       "      <td>165.000</td>\n",
       "      <td>75.523</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>165.821</td>\n",
       "      <td>0.203</td>\n",
       "      <td>41.000</td>\n",
       "      <td>12.000</td>\n",
       "      <td>12.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>657.174</td>\n",
       "      <td>0.507</td>\n",
       "      <td>575.031</td>\n",
       "      <td>0.344</td>\n",
       "      <td>10,780.000</td>\n",
       "      <td>535.000</td>\n",
       "      <td>4.000</td>\n",
       "      <td>3,816.000</td>\n",
       "      <td>3,820.000</td>\n",
       "      <td>2,179.000</td>\n",
       "      <td>4,010.000</td>\n",
       "      <td>13.000</td>\n",
       "      <td>177.000</td>\n",
       "      <td>9,990.000</td>\n",
       "      <td>10,038.000</td>\n",
       "      <td>11,010.000</td>\n",
       "      <td>12,655.000</td>\n",
       "      <td>8,393.000</td>\n",
       "      <td>693.000</td>\n",
       "      <td>158.000</td>\n",
       "      <td>152.000</td>\n",
       "      <td>56.000</td>\n",
       "      <td>133.000</td>\n",
       "      <td>46.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>8.000</td>\n",
       "      <td>16.000</td>\n",
       "      <td>20.000</td>\n",
       "      <td>10,926.000</td>\n",
       "      <td>7,748.000</td>\n",
       "      <td>10.919</td>\n",
       "      <td>21.237</td>\n",
       "      <td>12.712</td>\n",
       "      <td>8.402</td>\n",
       "      <td>9.341</td>\n",
       "      <td>10.826</td>\n",
       "      <td>21.014</td>\n",
       "      <td>12.571</td>\n",
       "      <td>8.540</td>\n",
       "      <td>9.240</td>\n",
       "      <td>30,848.564</td>\n",
       "      <td>75.000</td>\n",
       "      <td>3,863.000</td>\n",
       "      <td>3,663.000</td>\n",
       "      <td>200.000</td>\n",
       "      <td>13.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>54.000</td>\n",
       "      <td>-52.000</td>\n",
       "      <td>190.000</td>\n",
       "      <td>190.000</td>\n",
       "      <td>9,337.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>36.000</td>\n",
       "      <td>14.000</td>\n",
       "      <td>38.000</td>\n",
       "      <td>3,918.000</td>\n",
       "      <td>3,333.000</td>\n",
       "      <td>925.000</td>\n",
       "      <td>7,021.000</td>\n",
       "      <td>55,218.000</td>\n",
       "      <td>72.951</td>\n",
       "      <td>0.222</td>\n",
       "      <td>10.750</td>\n",
       "      <td>9.881</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>453.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>11.931</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9065</th>\n",
       "      <td>1.000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3,628.000</td>\n",
       "      <td>14.000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5.000</td>\n",
       "      <td>1,921.000</td>\n",
       "      <td>3,051.000</td>\n",
       "      <td>1,043.000</td>\n",
       "      <td>94.706</td>\n",
       "      <td>42.876</td>\n",
       "      <td>1,863.416</td>\n",
       "      <td>0.797</td>\n",
       "      <td>1,048.189</td>\n",
       "      <td>1.375</td>\n",
       "      <td>22.000</td>\n",
       "      <td>12.000</td>\n",
       "      <td>12.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>2,513.355</td>\n",
       "      <td>1.939</td>\n",
       "      <td>2,617.174</td>\n",
       "      <td>1.563</td>\n",
       "      <td>41,228.000</td>\n",
       "      <td>3,674.000</td>\n",
       "      <td>8.000</td>\n",
       "      <td>17,368.000</td>\n",
       "      <td>17,371.000</td>\n",
       "      <td>5,298.000</td>\n",
       "      <td>19,296.000</td>\n",
       "      <td>451.000</td>\n",
       "      <td>1,474.000</td>\n",
       "      <td>39,591.000</td>\n",
       "      <td>40,928.000</td>\n",
       "      <td>38,938.000</td>\n",
       "      <td>48,495.000</td>\n",
       "      <td>31,371.000</td>\n",
       "      <td>4,322.000</td>\n",
       "      <td>1,323.000</td>\n",
       "      <td>1,051.000</td>\n",
       "      <td>102.000</td>\n",
       "      <td>355.000</td>\n",
       "      <td>169.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>13.000</td>\n",
       "      <td>36.000</td>\n",
       "      <td>114.000</td>\n",
       "      <td>11,040.000</td>\n",
       "      <td>9,716.000</td>\n",
       "      <td>11.981</td>\n",
       "      <td>21.917</td>\n",
       "      <td>13.059</td>\n",
       "      <td>9.150</td>\n",
       "      <td>9.721</td>\n",
       "      <td>11.174</td>\n",
       "      <td>21.691</td>\n",
       "      <td>12.673</td>\n",
       "      <td>8.897</td>\n",
       "      <td>9.374</td>\n",
       "      <td>24,429.003</td>\n",
       "      <td>62.500</td>\n",
       "      <td>16,089.000</td>\n",
       "      <td>14,838.000</td>\n",
       "      <td>1,251.000</td>\n",
       "      <td>451.000</td>\n",
       "      <td>13.000</td>\n",
       "      <td>520.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>27.000</td>\n",
       "      <td>-401.000</td>\n",
       "      <td>-574.000</td>\n",
       "      <td>-574.000</td>\n",
       "      <td>10,378.000</td>\n",
       "      <td>15.000</td>\n",
       "      <td>382.000</td>\n",
       "      <td>92.000</td>\n",
       "      <td>403.000</td>\n",
       "      <td>3,268.000</td>\n",
       "      <td>2,575.000</td>\n",
       "      <td>776.000</td>\n",
       "      <td>4,618.000</td>\n",
       "      <td>42,778.000</td>\n",
       "      <td>74.590</td>\n",
       "      <td>0.614</td>\n",
       "      <td>8.270</td>\n",
       "      <td>7.365</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>6.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>11.577</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      EXPO  ft_2_categ_2014  ft_2_categ_2013  ft_2_categ_2015  \\\n",
       "7825 1.000                0                0                0   \n",
       "1303 1.000                0                0                1   \n",
       "4549 1.000                0                0                0   \n",
       "8274 1.000                0                0                1   \n",
       "9065 1.000                0                0                0   \n",
       "\n",
       "      ft_2_categ_2016  ft_2_categ_2012  ft_4_categ_0  ft_4_categ_1  \\\n",
       "7825                0                1             1             0   \n",
       "1303                0                0             1             0   \n",
       "4549                0                1             1             0   \n",
       "8274                0                0             0             1   \n",
       "9065                0                1             1             0   \n",
       "\n",
       "      ft_5_categ_V  ft_5_categ_N  ft_5_categ_O  ft_6_categ_N  ft_6_categ_V  \\\n",
       "7825             0             1             0             0             1   \n",
       "1303             1             0             0             1             0   \n",
       "4549             1             0             0             1             0   \n",
       "8274             1             0             0             1             0   \n",
       "9065             1             0             0             1             0   \n",
       "\n",
       "      ft_6_categ_O  ft_7_categ_1  ft_7_categ_V  ft_7_categ_2  ft_7_categ_3  \\\n",
       "7825             0             0             1             0             0   \n",
       "1303             0             0             0             1             0   \n",
       "4549             0             0             0             1             0   \n",
       "8274             0             0             0             1             0   \n",
       "9065             0             1             0             0             0   \n",
       "\n",
       "      ft_8_categ_O  ft_8_categ_V  ft_8_categ_N  ft_9_categ_1  ft_9_categ_V  \\\n",
       "7825             0             1             0             0             1   \n",
       "1303             1             0             0             1             0   \n",
       "4549             1             0             0             1             0   \n",
       "8274             1             0             0             1             0   \n",
       "9065             1             0             0             1             0   \n",
       "\n",
       "      ft_9_categ_2  ft_9_categ_3  ft_10_categ_O  ft_10_categ_V  ft_10_categ_N  \\\n",
       "7825             0             0              0              1              0   \n",
       "1303             0             0              1              0              0   \n",
       "4549             0             0              1              0              0   \n",
       "8274             0             0              1              0              0   \n",
       "9065             0             0              1              0              0   \n",
       "\n",
       "      ft_11_categ_N  ft_11_categ_V  ft_11_categ_O  ft_12_categ_N  \\\n",
       "7825              0              1              0              0   \n",
       "1303              1              0              0              1   \n",
       "4549              1              0              0              1   \n",
       "8274              1              0              0              1   \n",
       "9065              1              0              0              1   \n",
       "\n",
       "      ft_12_categ_V  ft_12_categ_O  ft_13_categ_N  ft_13_categ_V  \\\n",
       "7825              1              0              0              1   \n",
       "1303              0              0              0              0   \n",
       "4549              0              0              0              0   \n",
       "8274              0              0              1              0   \n",
       "9065              0              0              1              0   \n",
       "\n",
       "      ft_13_categ_O  ft_14_categ_N  ft_14_categ_V  ft_14_categ_O  \\\n",
       "7825              0              0              1              0   \n",
       "1303              1              1              0              0   \n",
       "4549              1              1              0              0   \n",
       "8274              0              1              0              0   \n",
       "9065              0              1              0              0   \n",
       "\n",
       "      ft_15_categ_AUTRE  ft_15_categ_V  ft_16_categ_IDENTIQUE  ft_16_categ_V  \\\n",
       "7825                  0              1                      0              1   \n",
       "1303                  1              0                      1              0   \n",
       "4549                  1              0                      1              0   \n",
       "8274                  1              0                      1              0   \n",
       "9065                  1              0                      1              0   \n",
       "\n",
       "      ft_17_categ_V  ft_17_categ_N  ft_17_categ_O  ft_18_categ_base  \\\n",
       "7825              0              1              0                 1   \n",
       "1303              1              0              0                 1   \n",
       "4549              1              0              0                 1   \n",
       "8274              1              0              0                 1   \n",
       "9065              1              0              0                 0   \n",
       "\n",
       "      ft_18_categ_effpi  ft_18_categ_V  ft_18_categ_pi  ft_18_categ_eff  \\\n",
       "7825                  0              0               0                0   \n",
       "1303                  0              0               0                0   \n",
       "4549                  0              0               0                0   \n",
       "8274                  0              0               0                0   \n",
       "9065                  0              0               1                0   \n",
       "\n",
       "      ft_19_categ_2  ft_19_categ_1  ft_21_categ_4  ft_21_categ_2  \\\n",
       "7825              1              0              1              0   \n",
       "1303              1              0              0              0   \n",
       "4549              1              0              0              1   \n",
       "8274              1              0              0              1   \n",
       "9065              1              0              0              1   \n",
       "\n",
       "      ft_21_categ_3  ft_21_categ_1  ft_23_categ_0.0  ft_23_categ_0.3  \\\n",
       "7825              0              0                1                0   \n",
       "1303              1              0                0                1   \n",
       "4549              0              0                1                0   \n",
       "8274              0              0                0                1   \n",
       "9065              0              0                0                1   \n",
       "\n",
       "      ft_23_categ_0.6  ft_23_categ_V  ft_23_categ_1.0  ft_23_categ_2.0  \\\n",
       "7825                0              0                0                0   \n",
       "1303                0              0                0                0   \n",
       "4549                0              0                0                0   \n",
       "8274                0              0                0                0   \n",
       "9065                0              0                0                0   \n",
       "\n",
       "      ft_23_categ_1.5  ft_24_categ_2  ft_24_categ_.  ft_24_categ_4  \\\n",
       "7825                0              0              1              0   \n",
       "1303                0              0              0              1   \n",
       "4549                0              0              0              1   \n",
       "8274                0              0              0              0   \n",
       "9065                0              0              0              0   \n",
       "\n",
       "      ft_24_categ_3  ft_24_categ_5  ft_24_categ_8  ft_24_categ__SUP_=10  \\\n",
       "7825              0              0              0                     0   \n",
       "1303              0              0              0                     0   \n",
       "4549              0              0              0                     0   \n",
       "8274              0              1              0                     0   \n",
       "9065              0              0              0                     0   \n",
       "\n",
       "      ft_24_categ_1  ft_24_categ_6  ft_24_categ_7  ft_24_categ_9  superficief  \\\n",
       "7825              0              0              0              0    3,900.000   \n",
       "1303              0              0              0              0    5,500.000   \n",
       "4549              0              0              0              0    7,750.000   \n",
       "8274              0              0              0              0    3,966.000   \n",
       "9065              0              1              0              0    3,628.000   \n",
       "\n",
       "        Age  Is_Exposed_M_1  Is_Exposed_M_2  Is_Exposed_M_3  Is_Exposed_M_4  \\\n",
       "7825 32.000               1               1               1               1   \n",
       "1303 55.000               1               1               1               1   \n",
       "4549 32.000               1               1               1               1   \n",
       "8274 40.000               1               1               1               1   \n",
       "9065 14.000               1               1               1               1   \n",
       "\n",
       "      Is_Exposed_M_5  Is_Exposed_M_6  Is_Exposed_M_7  Is_Exposed_M_8  \\\n",
       "7825               1               1               1               1   \n",
       "1303               1               1               1               1   \n",
       "4549               1               1               1               1   \n",
       "8274               1               1               1               1   \n",
       "9065               1               1               1               1   \n",
       "\n",
       "      Is_Exposed_M_9  Is_Exposed_M_10  Is_Exposed_M_11  Is_Exposed_M_12  \\\n",
       "7825               1                1                1                1   \n",
       "1303               1                1                1                1   \n",
       "4549               1                1                1                1   \n",
       "8274               1                1                1                1   \n",
       "9065               1                1                1                1   \n",
       "\n",
       "      Nb Pharmacies et parfumerie  Dynamique Entrepreneuriale  \\\n",
       "7825                        2.000                   5,680.000   \n",
       "1303                        4.000                   4,019.000   \n",
       "4549                        0.000                     793.000   \n",
       "8274                        0.000                     466.000   \n",
       "9065                        5.000                   1,921.000   \n",
       "\n",
       "      Dynamique Entrepreneuriale Service et Commerce  \\\n",
       "7825                                       7,647.000   \n",
       "1303                                       5,696.000   \n",
       "4549                                       1,231.000   \n",
       "8274                                         400.000   \n",
       "9065                                       3,051.000   \n",
       "\n",
       "      Synergie Médicale COMMUNE  Indice Fiscal Partiel  Score Fiscal  \\\n",
       "7825                  1,820.000                 90.281        32.985   \n",
       "1303                  1,382.000                106.666        69.608   \n",
       "4549                    391.000                101.071        57.102   \n",
       "8274                    165.000                 75.523         0.000   \n",
       "9065                  1,043.000                 94.706        42.876   \n",
       "\n",
       "      Indice Evasion Client  Score Evasion Client  Indice Synergie Médicale  \\\n",
       "7825             13,913.508                 5.948                 1,829.054   \n",
       "1303              5,217.565                 2.230                 1,388.875   \n",
       "4549             10,310.903                 4.408                   392.945   \n",
       "8274                  0.000                 0.000                   165.821   \n",
       "9065              1,863.416                 0.797                 1,048.189   \n",
       "\n",
       "      Score Synergie Médicale    REG  Nb Omnipraticiens BV  \\\n",
       "7825                    2.412 93.000                12.000   \n",
       "1303                    1.827 94.000                12.000   \n",
       "4549                    0.505 91.000                32.000   \n",
       "8274                    0.203 41.000                12.000   \n",
       "9065                    1.375 22.000                12.000   \n",
       "\n",
       "      Nb Infirmiers Libéraux BV  Nb dentistes Libéraux BV  \\\n",
       "7825                     12.000                     6.000   \n",
       "1303                     12.000                     6.000   \n",
       "4549                     35.000                    18.000   \n",
       "8274                     12.000                     6.000   \n",
       "9065                     12.000                     6.000   \n",
       "\n",
       "      Nb pharmaciens Libéraux BV  Densité Médicale BV  \\\n",
       "7825                       6.000                1.000   \n",
       "1303                       6.000                1.000   \n",
       "4549                      18.000                0.272   \n",
       "8274                       6.000                1.000   \n",
       "9065                       6.000                1.000   \n",
       "\n",
       "      Score équipement de santé BV  Indice Démographique  Score Démographique  \\\n",
       "7825                         1.000             4,416.965                3.408   \n",
       "1303                         1.000             3,221.920                2.486   \n",
       "4549                         4.000               358.093                0.276   \n",
       "8274                         1.000               657.174                0.507   \n",
       "9065                         1.000             2,513.355                1.939   \n",
       "\n",
       "      Indice Ménages  Score Ménages  Population  Evolution Population  \\\n",
       "7825       5,145.140          3.074  72,454.000               -66.000   \n",
       "1303       3,365.347          2.010  52,851.000             1,423.000   \n",
       "4549         401.889          0.240   5,874.000                79.000   \n",
       "8274         575.031          0.344  10,780.000               535.000   \n",
       "9065       2,617.174          1.563  41,228.000             3,674.000   \n",
       "\n",
       "      Evolution Pop %  Nb Ménages  Nb Résidences Principales  Nb propriétaire  \\\n",
       "7825            0.000  34,144.000                 34,175.000       17,336.000   \n",
       "1303            2.000  22,333.000                 22,448.000        9,848.000   \n",
       "4549            1.000   2,667.000                  2,667.000        1,446.000   \n",
       "8274            4.000   3,816.000                  3,820.000        2,179.000   \n",
       "9065            8.000  17,368.000                 17,371.000        5,298.000   \n",
       "\n",
       "      Nb Logement  Nb Résidences Secondaires  Nb Log Vacants  \\\n",
       "7825   53,801.000                 16,703.000       2,923.000   \n",
       "1303   29,054.000                  3,892.000       2,714.000   \n",
       "4549   19,286.000                 16,067.000         552.000   \n",
       "8274    4,010.000                     13.000         177.000   \n",
       "9065   19,296.000                    451.000       1,474.000   \n",
       "\n",
       "      Nb Occupants Résidence Principale   Nb Femme   Nb Homme  Nb Mineurs  \\\n",
       "7825                         71,230.000 75,626.000 66,092.000  82,483.000   \n",
       "1303                         51,940.000 55,574.000 47,790.000  62,400.000   \n",
       "4549                          5,680.000  5,962.000  5,536.000   6,655.000   \n",
       "8274                          9,990.000 10,038.000 11,010.000  12,655.000   \n",
       "9065                         39,591.000 40,928.000 38,938.000  48,495.000   \n",
       "\n",
       "      Nb Majeurs  Nb Etudiants  Nb Entreprises Secteur Services  \\\n",
       "7825  59,235.000     4,652.000                        2,356.000   \n",
       "1303  40,964.000     3,326.000                        2,067.000   \n",
       "4549   4,843.000       271.000                          253.000   \n",
       "8274   8,393.000       693.000                          158.000   \n",
       "9065  31,371.000     4,322.000                        1,323.000   \n",
       "\n",
       "      Nb Entreprises Secteur Commerce  Nb Entreprises Secteur Construction  \\\n",
       "7825                        3,519.000                              768.000   \n",
       "1303                        2,333.000                              458.000   \n",
       "4549                          683.000                               80.000   \n",
       "8274                          152.000                               56.000   \n",
       "9065                        1,051.000                              102.000   \n",
       "\n",
       "      Nb Entreprises Secteur Industrie  Nb Création Enteprises  \\\n",
       "7825                           812.000                 720.000   \n",
       "1303                           623.000                 418.000   \n",
       "4549                            98.000                 182.000   \n",
       "8274                           133.000                  46.000   \n",
       "9065                           355.000                 169.000   \n",
       "\n",
       "      Nb Création Industrielles  Nb Création Construction  \\\n",
       "7825                     34.000                   116.000   \n",
       "1303                     35.000                    73.000   \n",
       "4549                     10.000                     5.000   \n",
       "8274                      2.000                     8.000   \n",
       "9065                      6.000                    13.000   \n",
       "\n",
       "      Nb Création Commerces  Nb Création Services  \\\n",
       "7825                196.000               374.000   \n",
       "1303                 97.000               213.000   \n",
       "4549                 69.000                98.000   \n",
       "8274                 16.000                20.000   \n",
       "9065                 36.000               114.000   \n",
       "\n",
       "      Moyenne Revenus Fiscaux Départementaux  \\\n",
       "7825                              12,288.000   \n",
       "1303                               9,666.000   \n",
       "4549                              11,659.000   \n",
       "8274                              10,926.000   \n",
       "9065                              11,040.000   \n",
       "\n",
       "      Moyenne Revenus Fiscaux Régionaux  Dep Moyenne Salaires Horaires  \\\n",
       "7825                          9,262.000                         12.579   \n",
       "1303                         10,943.000                         10.789   \n",
       "4549                         10,369.000                         10.982   \n",
       "8274                          7,748.000                         10.919   \n",
       "9065                          9,716.000                         11.981   \n",
       "\n",
       "      Dep Moyenne Salaires Cadre Horaires  \\\n",
       "7825                               22.519   \n",
       "1303                               22.344   \n",
       "4549                               20.758   \n",
       "8274                               21.237   \n",
       "9065                               21.917   \n",
       "\n",
       "      Dep Moyenne Salaires Prof Intermédiaire Horaires  \\\n",
       "7825                                            12.864   \n",
       "1303                                            12.756   \n",
       "4549                                            12.452   \n",
       "8274                                            12.712   \n",
       "9065                                            13.059   \n",
       "\n",
       "      Dep Moyenne Salaires Employé Horaires  \\\n",
       "7825                                  8.836   \n",
       "1303                                  8.467   \n",
       "4549                                  8.485   \n",
       "8274                                  8.402   \n",
       "9065                                  9.150   \n",
       "\n",
       "      Dep Moyenne Salaires Ouvrié Horaires  Reg Moyenne Salaires Horaires  \\\n",
       "7825                                 9.355                         11.815   \n",
       "1303                                 8.744                         10.679   \n",
       "4549                                 9.139                         10.910   \n",
       "8274                                 9.341                         10.826   \n",
       "9065                                 9.721                         11.174   \n",
       "\n",
       "      Reg Moyenne Salaires Cadre Horaires  \\\n",
       "7825                               21.835   \n",
       "1303                               20.992   \n",
       "4549                               21.095   \n",
       "8274                               21.014   \n",
       "9065                               21.691   \n",
       "\n",
       "      Reg Moyenne Salaires Prof Intermédiaire Horaires  \\\n",
       "7825                                            12.773   \n",
       "1303                                            12.775   \n",
       "4549                                            12.340   \n",
       "8274                                            12.571   \n",
       "9065                                            12.673   \n",
       "\n",
       "      Reg Moyenne Salaires Employé Horaires  \\\n",
       "7825                                  8.660   \n",
       "1303                                  8.458   \n",
       "4549                                  8.453   \n",
       "8274                                  8.540   \n",
       "9065                                  8.897   \n",
       "\n",
       "      Reg Moyenne Salaires Ouvrié Horaires  Valeur ajoutée régionale  \\\n",
       "7825                                 9.207                62,711.264   \n",
       "1303                                 8.725                 3,021.411   \n",
       "4549                                 8.801                26,439.685   \n",
       "8274                                 9.240                30,848.564   \n",
       "9065                                 9.374                24,429.003   \n",
       "\n",
       "      Score Urbanité   Nb Atifs  Nb Actifs Salariés  Nb Actifs Non Salariés  \\\n",
       "7825          87.500 26,226.000          21,994.000               4,232.000   \n",
       "1303          62.500 19,034.000          16,752.000               2,282.000   \n",
       "4549          37.500  1,872.000           1,474.000                 398.000   \n",
       "8274          75.000  3,863.000           3,663.000                 200.000   \n",
       "9065          62.500 16,089.000          14,838.000               1,251.000   \n",
       "\n",
       "      Nb Logement Secondaire et Occasionnel  Nb Hotel  Capacité Hotel  \\\n",
       "7825                             16,703.000    70.000       2,506.000   \n",
       "1303                              3,892.000    27.000       1,340.000   \n",
       "4549                             16,067.000     8.000         274.000   \n",
       "8274                                 13.000     0.000           0.000   \n",
       "9065                                451.000    13.000         520.000   \n",
       "\n",
       "      Nb Camping  Capacité Camping  Taux étudiants  Taux Propriété  \\\n",
       "7825      10.000         1,674.000           2.000          32.000   \n",
       "1303       2.000           173.000           1.000          33.000   \n",
       "4549      11.000         5,134.000           0.000           7.000   \n",
       "8274       0.000             0.000           0.000          54.000   \n",
       "9065       0.000             0.000           2.000          27.000   \n",
       "\n",
       "      Dynamique Démographique INSEE  Capacité Fisc  Capacité Fiscale  \\\n",
       "7825                          0.000       -915.000          -915.000   \n",
       "1303                       -128.000          0.000             0.000   \n",
       "4549                         -7.000        135.000           135.000   \n",
       "8274                        -52.000        190.000           190.000   \n",
       "9065                       -401.000       -574.000          -574.000   \n",
       "\n",
       "      Moyenne Revnus fiscaux  Taux Evasion Client  \\\n",
       "7825              10,775.000              112.000   \n",
       "1303              10,304.500               42.000   \n",
       "4549              11,014.000               83.000   \n",
       "8274               9,337.000                0.000   \n",
       "9065              10,378.000               15.000   \n",
       "\n",
       "      Nb Education, santé, action sociale  \\\n",
       "7825                              774.000   \n",
       "1303                              593.000   \n",
       "4549                               70.000   \n",
       "8274                               36.000   \n",
       "9065                              382.000   \n",
       "\n",
       "      Nb Services personnels et domestiques  Nb Santé, action sociale  \\\n",
       "7825                                282.000                   764.000   \n",
       "1303                                169.000                   633.000   \n",
       "4549                                 36.000                    65.000   \n",
       "8274                                 14.000                    38.000   \n",
       "9065                                 92.000                   403.000   \n",
       "\n",
       "      Nb Industries des biens intermédiaires  Nb de Commerce  \\\n",
       "7825                               2,892.000       7,609.000   \n",
       "1303                                  30.000         342.000   \n",
       "4549                                 922.000       3,125.000   \n",
       "8274                               3,918.000       3,333.000   \n",
       "9065                               3,268.000       2,575.000   \n",
       "\n",
       "      Nb de Services aux particuliers  \\\n",
       "7825                        3,241.000   \n",
       "1303                          187.000   \n",
       "4549                        1,003.000   \n",
       "8274                          925.000   \n",
       "9065                          776.000   \n",
       "\n",
       "      Nb institution de Education, santé, action sociale, administration  \\\n",
       "7825                                         14,267.000                    \n",
       "1303                                            828.000                    \n",
       "4549                                          5,986.000                    \n",
       "8274                                          7,021.000                    \n",
       "9065                                          4,618.000                    \n",
       "\n",
       "      PIB Régionnal  Score Croissance Population  \\\n",
       "7825    130,177.000                       71.311   \n",
       "1303      6,358.000                       72.131   \n",
       "4549     57,350.000                       71.721   \n",
       "8274     55,218.000                       72.951   \n",
       "9065     42,778.000                       74.590   \n",
       "\n",
       "      Score Croissance Entrepreneuriale  Score VA Région  Score PIB  \\\n",
       "7825                              2.996           23.059     25.040   \n",
       "1303                              1.589            0.000      0.000   \n",
       "4549                              0.931            9.047     10.312   \n",
       "8274                              0.222           10.750      9.881   \n",
       "9065                              0.614            8.270      7.365   \n",
       "\n",
       "      Orientation Economique_BassinIndustriel  \\\n",
       "7825                                    0.000   \n",
       "1303                                    0.000   \n",
       "4549                                    0.000   \n",
       "8274                                    0.000   \n",
       "9065                                    0.000   \n",
       "\n",
       "      Orientation Economique_BassinRésidentiel  \\\n",
       "7825                                     0.000   \n",
       "1303                                     0.000   \n",
       "4549                                     1.000   \n",
       "8274                                     0.000   \n",
       "9065                                     0.000   \n",
       "\n",
       "      Orientation Economique_BassinUrbain  \\\n",
       "7825                                1.000   \n",
       "1303                                1.000   \n",
       "4549                                0.000   \n",
       "8274                                1.000   \n",
       "9065                                1.000   \n",
       "\n",
       "      Orientation Economique_Bassindiversifié  \\\n",
       "7825                                    0.000   \n",
       "1303                                    0.000   \n",
       "4549                                    0.000   \n",
       "8274                                    0.000   \n",
       "9065                                    0.000   \n",
       "\n",
       "      Orientation Economique_BassinsAgroalimentaire  \\\n",
       "7825                                          0.000   \n",
       "1303                                          0.000   \n",
       "4549                                          0.000   \n",
       "8274                                          0.000   \n",
       "9065                                          0.000   \n",
       "\n",
       "      Urbanité Ruralité_Comrurale_INF_2000mhabts  \\\n",
       "7825                                       0.000   \n",
       "1303                                       0.000   \n",
       "4549                                       0.000   \n",
       "8274                                       0.000   \n",
       "9065                                       0.000   \n",
       "\n",
       "      Urbanité Ruralité_Com_INF_50mhabts  \\\n",
       "7825                               0.000   \n",
       "1303                               0.000   \n",
       "4549                               1.000   \n",
       "8274                               0.000   \n",
       "9065                               0.000   \n",
       "\n",
       "      Urbanité Ruralité_Comrurale_SUP_2000habts  \\\n",
       "7825                                      0.000   \n",
       "1303                                      0.000   \n",
       "4549                                      0.000   \n",
       "8274                                      0.000   \n",
       "9065                                      0.000   \n",
       "\n",
       "      Urbanité Ruralité_Com_INF_10mhabts  Urbanité Ruralité_Com_INF_200mhabts  \\\n",
       "7825                               0.000                                0.000   \n",
       "1303                               0.000                                1.000   \n",
       "4549                               0.000                                0.000   \n",
       "8274                               0.000                                1.000   \n",
       "9065                               0.000                                1.000   \n",
       "\n",
       "      Urbanité Ruralité_Com_SUP_200mhabts  NB_RGA_FM  Pop_EAIP_CE  \\\n",
       "7825                                1.000  2,353.000   26,884.400   \n",
       "1303                                0.000     84.000   25,789.800   \n",
       "4549                                0.000      0.000        0.000   \n",
       "8274                                0.000    453.000        0.000   \n",
       "9065                                0.000      6.000        0.000   \n",
       "\n",
       "      Pop_EAIP_SM  Total  Gliss  Bloc  Coul   Eff  Eros  INT_MAX_CALC  \\\n",
       "7825    4,599.600  0.000  0.000 0.000 0.000 0.000 0.000         6.590   \n",
       "1303      394.200  4.000  1.000 3.000 0.000 0.000 0.000         5.990   \n",
       "4549        0.000  0.000  0.000 0.000 0.000 0.000 0.000         0.000   \n",
       "8274        0.000  0.000  0.000 0.000 0.000 0.000 0.000         0.000   \n",
       "9065        0.000  2.000  0.000 0.000 0.000 2.000 0.000         0.000   \n",
       "\n",
       "      NB_TOTAL  Freq_TGN_1987_2015  Freq_moy_inon_Entre0et1‰  Freq_moy_inon_0  \\\n",
       "7825    72.000               3.225                         0                0   \n",
       "1303     8.000               0.000                         1                0   \n",
       "4549     0.000               6.722                         1                0   \n",
       "8274     0.000              11.931                         0                0   \n",
       "9065     0.000              11.577                         0                0   \n",
       "\n",
       "      Freq_moy_inon_Entre2et5‰  Freq_moy_inon_Entre5et10‰  \\\n",
       "7825                         0                          0   \n",
       "1303                         0                          0   \n",
       "4549                         0                          0   \n",
       "8274                         0                          0   \n",
       "9065                         1                          0   \n",
       "\n",
       "      Freq_moy_inon_Plusde10‰  Freq_moy_inon_Entre1et2‰  \\\n",
       "7825                        0                         1   \n",
       "1303                        0                         0   \n",
       "4549                        0                         0   \n",
       "8274                        0                         1   \n",
       "9065                        0                         0   \n",
       "\n",
       "      Freq_moy_sech_Entre0et1‰  Freq_moy_sech_0  Freq_moy_sech_Entre1et2‰  \\\n",
       "7825                         1                0                         0   \n",
       "1303                         0                1                         0   \n",
       "4549                         0                1                         0   \n",
       "8274                         1                0                         0   \n",
       "9065                         0                1                         0   \n",
       "\n",
       "      Freq_moy_sech_Entre2et5‰  Freq_moy_sech_Entre5et10‰  \\\n",
       "7825                         0                          0   \n",
       "1303                         0                          0   \n",
       "4549                         0                          0   \n",
       "8274                         0                          0   \n",
       "9065                         0                          0   \n",
       "\n",
       "      Freq_moy_sech_Plusde10‰  Freq_moy_sei_0  Freq_moy_sei_Entre0et1‰  \\\n",
       "7825                        0               1                        0   \n",
       "1303                        0               1                        0   \n",
       "4549                        0               1                        0   \n",
       "8274                        0               1                        0   \n",
       "9065                        0               1                        0   \n",
       "\n",
       "      Freq_moy_sei_Entre1et2‰  Freq_moy_sei_Plusde10‰  \\\n",
       "7825                        0                       0   \n",
       "1303                        0                       0   \n",
       "4549                        0                       0   \n",
       "8274                        0                       0   \n",
       "9065                        0                       0   \n",
       "\n",
       "      Freq_moy_sei_Entre5et10‰  Freq_moy_sei_Entre2et5‰  Freq_moy_MVT_0  \\\n",
       "7825                         0                        0               1   \n",
       "1303                         0                        0               1   \n",
       "4549                         0                        0               1   \n",
       "8274                         0                        0               1   \n",
       "9065                         0                        0               1   \n",
       "\n",
       "      Freq_moy_MVT_Entre0et1‰  Freq_moy_MVT_Entre1et2‰  \\\n",
       "7825                        0                        0   \n",
       "1303                        0                        0   \n",
       "4549                        0                        0   \n",
       "8274                        0                        0   \n",
       "9065                        0                        0   \n",
       "\n",
       "      Freq_moy_MVT_Entre2et5‰  y_clusters_3  y_clusters_1  y_clusters_5  \\\n",
       "7825                        0             1             0             0   \n",
       "1303                        0             0             1             0   \n",
       "4549                        0             0             1             0   \n",
       "8274                        0             0             1             0   \n",
       "9065                        0             0             1             0   \n",
       "\n",
       "      y_clusters_0  y_clusters_7  y_clusters_2  y_clusters_4  y_clusters_6  \n",
       "7825             0             0             0             0             0  \n",
       "1303             0             0             0             0             0  \n",
       "4549             0             0             0             0             0  \n",
       "8274             0             0             0             0             0  \n",
       "9065             0             0             0             0             0  "
      ]
     },
     "execution_count": 458,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40452028168738957"
      ]
     },
     "execution_count": 459,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First XGBClassifier \n",
    "import xgboost as xgb\n",
    "\n",
    "y_train_s = y_train.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "y_test_s = y_test.apply(lambda row: -1 if row['target']==0 else 1, axis=1)\n",
    "\n",
    "xgb_clf1 = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "       colsample_bytree=0.7, gamma=0, learning_rate=0.005, max_delta_step=0,\n",
    "       max_depth=3, min_child_weight=1, missing=9999999999,\n",
    "       n_estimators=1000, n_jobs=1, nthread=None,\n",
    "       objective='binary:logistic', random_state=0, reg_alpha=0.01,\n",
    "       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n",
    "       subsample=0.4)\n",
    "\n",
    "xgb_clf1.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf_pred_proba = xgb_clf1.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf_pred_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 613,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 2592 candidates, totalling 12960 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  25 tasks      | elapsed:  1.8min\n",
      "[Parallel(n_jobs=-1)]: Done 146 tasks      | elapsed:  9.6min\n",
      "[Parallel(n_jobs=-1)]: Done 349 tasks      | elapsed: 26.6min\n",
      "[Parallel(n_jobs=-1)]: Done 632 tasks      | elapsed: 54.1min\n",
      "[Parallel(n_jobs=-1)]: Done 997 tasks      | elapsed: 84.1min\n",
      "[Parallel(n_jobs=-1)]: Done 1442 tasks      | elapsed: 118.8min\n",
      "[Parallel(n_jobs=-1)]: Done 1969 tasks      | elapsed: 161.9min\n",
      "[Parallel(n_jobs=-1)]: Done 2576 tasks      | elapsed: 213.3min\n",
      "[Parallel(n_jobs=-1)]: Done 3265 tasks      | elapsed: 274.8min\n",
      "[Parallel(n_jobs=-1)]: Done 4034 tasks      | elapsed: 333.7min\n",
      "[Parallel(n_jobs=-1)]: Done 4885 tasks      | elapsed: 412.8min\n",
      "[Parallel(n_jobs=-1)]: Done 5816 tasks      | elapsed: 492.9min\n",
      "[Parallel(n_jobs=-1)]: Done 6829 tasks      | elapsed: 583.2min\n",
      "[Parallel(n_jobs=-1)]: Done 7922 tasks      | elapsed: 682.4min\n",
      "[Parallel(n_jobs=-1)]: Done 9097 tasks      | elapsed: 795.2min\n",
      "[Parallel(n_jobs=-1)]: Done 10352 tasks      | elapsed: 924.2min\n",
      "[Parallel(n_jobs=-1)]: Done 11689 tasks      | elapsed: 1054.5min\n",
      "[Parallel(n_jobs=-1)]: Done 12960 out of 12960 | elapsed: 1190.3min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "       colsample_bytree=0.6, gamma=0, lambda=0, learning_rate=0.02,\n",
      "       max_delta_step=0, max_depth=2, min_child_weight=1,\n",
      "       missing=9999999999, n_estimators=600, n_jobs=1, nthread=None,\n",
      "       objective='binary:logistic', random_state=0, reg_alpha=0.005,\n",
      "       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n",
      "       subsample=0.6)\n"
     ]
    }
   ],
   "source": [
    "# First hyperparameters exploration\n",
    "\n",
    "params={\n",
    "    'max_depth': [4,6,8], \n",
    "    'subsample': [0.4,0.6, 0.7],         # Boosting sample size\n",
    "    'colsample_bytree': [0.5, 0.6, 0.7], # Sample columns ratio by tree\n",
    "    'n_estimators': [600, 800, 1000], \n",
    "    'reg_alpha': [0.005, 0.01, 0.02],    # L1 regularization\n",
    "    'lambda' : [0, 0.02],                # L2 regularization\n",
    "    'learning_rate' : [0.005, 0.01, 0.015, 0.02]\n",
    "}\n",
    "\n",
    "xgb_clf = xgb.XGBClassifier(missing=9999999999)\n",
    "rs = GridSearchCV(xgb_clf,\n",
    "                  params,\n",
    "                  cv=5,\n",
    "                  scoring=\"roc_auc\",\n",
    "                  n_jobs=-1,\n",
    "                  verbose=2)\n",
    "rs.fit(X_train, y_train_s)\n",
    "best_est = rs.best_estimator_\n",
    "print(best_est)\n",
    "\n",
    "\n",
    "xgb_clf_pred_proba = rs.predict_proba(X_test)[:, 1]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 615,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.408287997030757"
      ]
     },
     "execution_count": 615,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gini_normalized(y_test.target, xgb_clf_pred_proba)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We only have 2 levels for our trees and a high learning rate (among the one we tried to apply)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Try a bigger set of XGB trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1082,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1 candidates, totalling 5 fits\n",
      "[CV] colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV]  colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist, total=   7.3s\n",
      "[CV] colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    7.5s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV]  colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist, total=   7.4s\n",
      "[CV] colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist \n",
      "[CV]  colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist, total=   7.5s\n",
      "[CV] colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist \n",
      "[CV]  colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist, total=   7.4s\n",
      "[CV] colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist \n",
      "[CV]  colsample_bytree=0.4, learning_rate=0.005, max_depth=3, n_estimators=1000, reg_alpha=0.1, scale_pos_weight=4, subsample=0.5, tree_method=gpu_hist, total=   6.6s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   5 out of   5 | elapsed:   37.6s finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "       colsample_bytree=0.4, gamma=0, learning_rate=0.005,\n",
      "       max_delta_step=0, max_depth=3, min_child_weight=1,\n",
      "       missing=9999999999, n_estimators=1000, n_jobs=1, nthread=None,\n",
      "       objective='binary:logistic', random_state=0, reg_alpha=0.1,\n",
      "       reg_lambda=1, scale_pos_weight=4, seed=None, silent=True,\n",
      "       subsample=0.5, tree_method='gpu_hist')\n"
     ]
    }
   ],
   "source": [
    "# Second hyperparameters exploration\n",
    "\n",
    "params={\n",
    "    'max_depth': [3], \n",
    "    'subsample': [0.5],         # Boosting sample size\n",
    "    'colsample_bytree': [0.4], # Sample columns ratio by tree\n",
    "    'n_estimators': [1000], \n",
    "    'reg_alpha': [0.1],    # L1 regularization\n",
    "    #'lambda' : [0],                # L2 regularization\n",
    "    'learning_rate' : [0.005],\n",
    "    'scale_pos_weight' : [4],\n",
    "    'tree_method' : ['gpu_hist']\n",
    "}\n",
    "\n",
    "xgb_clf = xgb.XGBClassifier(missing=9999999999)\n",
    "rs = GridSearchCV(xgb_clf,\n",
    "                  params,\n",
    "                  cv=5,\n",
    "                  scoring=\"roc_auc\",\n",
    "                  n_jobs=1,\n",
    "                  verbose=2)\n",
    "rs.fit(X_train, y_train_s)\n",
    "best_est = rs.best_estimator_\n",
    "print(best_est)\n",
    "\n",
    "\n",
    "xgb_clf_pred_proba = rs.predict_proba(X_test)[:, 1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1083,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0   0.774\n",
      "Name: mean_train_score, dtype: float64\n",
      "0   0.722\n",
      "Name: mean_test_score, dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split0_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split1_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split2_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split3_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split4_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('mean_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('std_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.40845404022152115"
      ]
     },
     "execution_count": 1083,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# AUC score\n",
    "cv_results_df = pd.DataFrame(rs.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "print(cv_results_df.mean_train_score)\n",
    "print(cv_results_df.mean_test_score)\n",
    "\n",
    "# gini score\n",
    "gini_normalized(y_test.target, xgb_clf_pred_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1084,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model number 1\n",
      "[{'colsample_bytree': 0.4, 'learning_rate': 0.005, 'max_depth': 3, 'n_estimators': 1000, 'reg_alpha': 0.1, 'scale_pos_weight': 4, 'subsample': 0.5, 'tree_method': 'gpu_hist'}]\n"
     ]
    }
   ],
   "source": [
    "best_scores_list, best_params_list = get_n_best_params(rs, 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1085,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[1482  899]\n",
      " [ 221  467]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analyze the best models\n",
    "Identify common points, differences ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 678,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model number 1\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.005, 'subsample': 0.4}]\n",
      "model number 2\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.005, 'subsample': 0.6}]\n",
      "model number 3\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.005, 'subsample': 0.7}]\n",
      "model number 4\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.01, 'subsample': 0.4}]\n",
      "model number 5\n",
      "[{'colsample_bytree': 0.5, 'lambda': 0, 'learning_rate': 0.005, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.01, 'subsample': 0.6}]\n"
     ]
    }
   ],
   "source": [
    "import operator\n",
    "\n",
    "#return the n best models found thanks to gridsearch\n",
    "def get_n_best_params(v_gridSearch, nb_best_models):\n",
    "    cv_results_df = pd.DataFrame(v_gridSearch.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "    \n",
    "    # Look at the best params\n",
    "    index_list = sorted(range(len(cv_results_df['mean_test_score'])), key=lambda i: cv_results_df['mean_test_score'][i], reverse=True)[:nb_best_models]    \n",
    "    \n",
    "    for i in range(1, nb_best_models+1):\n",
    "        print(\"model number {}\".format(i))\n",
    "        print(cv_results_df.iloc[i-1:i,:][\"params\"].values)\n",
    "    \n",
    "    return cv_results_df.iloc[index_list,:][\"mean_test_score\"], cv_results_df.iloc[index_list,:][\"params\"]\n",
    "\n",
    "\n",
    "best_scores_list, best_params_list = get_n_best_params(rs, 5)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Saved models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model number 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([{'colsample_bytree': 0.6, 'lambda': 0, 'learning_rate': 0.02, 'max_depth': 2, 'n_estimators': 600, 'reg_alpha': 0.005, 'subsample': 0.6}],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 664,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Params model #1    \n",
    "cv_results_df = pd.DataFrame(rs.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "idx = sorted(range(len(cv_results_df['mean_test_score'])), key=lambda i: cv_results_df['mean_test_score'][i], reverse=True)[0:1]    \n",
    "cv_results_df.iloc[idx,:][\"params\"].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 909,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40810852387603413"
      ]
     },
     "execution_count": 909,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gini perf model #1\n",
    "xgb_clf2 = xgb.XGBClassifier(\n",
    "       colsample_bytree=0.6,  learning_rate=0.02, \n",
    "       max_depth=2, missing=9999999999,\n",
    "       n_estimators=600, n_jobs=-1, \n",
    "       objective='binary:logistic', \n",
    "       reg_alpha=0.005,\n",
    "       tree_method = 'gpu_hist',\n",
    "       random_state = 43,\n",
    "       subsample=0.6)\n",
    "\n",
    "xgb_clf2.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf2_pred_proba = xgb_clf2.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf2_pred_proba)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 910,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2290   91]\n",
      " [ 572  116]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf2_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model number 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 911,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split0_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split1_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split2_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split3_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('split4_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('mean_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\sklearn\\utils\\deprecation.py:125: FutureWarning: You are accessing a training score ('std_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([], dtype=object)"
      ]
     },
     "execution_count": 911,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Params model #2\n",
    "cv_results_df = pd.DataFrame(rs.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "idx = sorted(range(len(cv_results_df['mean_test_score'])), key=lambda i: cv_results_df['mean_test_score'][i], reverse=True)[1:2]    \n",
    "cv_results_df.iloc[idx,:][\"params\"].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 937,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4099752888663156"
      ]
     },
     "execution_count": 937,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gini perf model #2\n",
    "xgb_clf2 = xgb.XGBClassifier(\n",
    "       colsample_bytree=0.6,  \n",
    "       learning_rate=0.02, \n",
    "       max_depth=2, missing=9999999999,\n",
    "       n_estimators=600, n_jobs=-1, \n",
    "       objective='binary:logistic', \n",
    "       reg_alpha=0.005,\n",
    "       reg_lambda = 0.02,\n",
    "       tree_method = 'gpu_hist',\n",
    "       random_state = 43,\n",
    "       subsample=0.6)\n",
    "\n",
    "xgb_clf2.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf2_pred_proba = xgb_clf2.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf2_pred_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 938,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2294   87]\n",
      " [ 570  118]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf2_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model number 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 914,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([], dtype=object)"
      ]
     },
     "execution_count": 914,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Params model #3\n",
    "cv_results_df = pd.DataFrame(rs.cv_results_)[['params', 'mean_train_score', 'mean_test_score']]\n",
    "idx = sorted(range(len(cv_results_df['mean_test_score'])), key=lambda i: cv_results_df['mean_test_score'][i], reverse=True)[2:3]    \n",
    "cv_results_df.iloc[idx,:][\"params\"].values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 915,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4078582381840736"
      ]
     },
     "execution_count": 915,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gini perf model #3\n",
    "xgb_clf3 = xgb.XGBClassifier(\n",
    "       colsample_bytree=0.5,  \n",
    "       learning_rate=0.02, \n",
    "       max_depth=2, missing=9999999999,\n",
    "       n_estimators=600, n_jobs=-1, \n",
    "       objective='binary:logistic', \n",
    "       reg_alpha=0.005,\n",
    "       reg_lambda = 0,\n",
    "       tree_method = 'gpu_hist',\n",
    "       random_state = 43,\n",
    "       subsample=0.7)\n",
    "\n",
    "xgb_clf3.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf3_pred_proba = xgb_clf3.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf3_pred_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 916,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xgboost import plot_importance\n",
    "\n",
    "\n",
    "# plot feature importance\n",
    "plot_importance(xgb_clf3, max_num_features=30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 917,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[2298   83]\n",
      " [ 579  109]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf3_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model number 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 918,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.40853339909945985"
      ]
     },
     "execution_count": 918,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "xgb_clf4 = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
    "       colsample_bytree=0.4, gamma=0, learning_rate=0.005,\n",
    "       max_delta_step=0, max_depth=3, min_child_weight=1,\n",
    "       missing=9999999999, n_estimators=1000, n_jobs=1, nthread=None,\n",
    "       objective='binary:logistic', random_state=0, reg_alpha=0,\n",
    "       reg_lambda=1, scale_pos_weight=4, seed=None, silent=True,\n",
    "       subsample=0.5, tree_method='gpu_hist')\n",
    "\n",
    "xgb_clf4.fit(X_train, y_train_s)\n",
    "\n",
    "xgb_clf4_pred_proba = xgb_clf4.predict_proba(X_test)[:, 1]\n",
    "\n",
    "gini_normalized(y_test.target, xgb_clf4_pred_proba)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 919,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[1480  901]\n",
      " [ 221  467]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "analyze_model(xgb_clf4_pred_proba, y_test.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 920,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot feature importance\n",
    "plot_importance(xgb_clf4, max_num_features=35)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Locate errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1065,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to enumerate pred val and real val for a given department and the error rate obtained\n",
    "def analyze_pred_real_values(pred_proba, pred_value, real_value):\n",
    "    # Transform predictions to input uniform data into the confusion matrix function\n",
    "    y_pred = [0 if x < 0.5 else 1 for x in pred_proba]\n",
    "    \n",
    "    # Predicted Positive List\n",
    "    pred_val_indexes_list = [i for i, x in enumerate(y_pred) if x == pred_value] \n",
    "    all_real_pred_val_df = y_test.iloc[pred_val_indexes_list]\n",
    "    \n",
    "    # Search Predicted : pred_value but real_value for real\n",
    "    real_val_pred_val_df = all_real_pred_val_df[all_real_pred_val_df[\"target\"] == real_value]\n",
    "    \n",
    "    # Get full False Positive X_test data\n",
    "    X_test_real_val_pred_val = X_test[X_test.index.isin(real_val_pred_val_df.index.values)]\n",
    "    \n",
    "    # Add CODGEO to X_test dataframe \n",
    "    CODGEO_df = pd.DataFrame(CODGEO[X_test.index])\n",
    "    CODGEO_df.columns = [[\"CODGEO\"]]\n",
    "    X_test_real_val_pred_val[\"CODGEO\"] = CODGEO_df.loc[X_test.index,\"CODGEO\"].copy()\n",
    "    \n",
    "    # Evaluate error ratio per Deprtment\n",
    "    CODGEO_SUMDEP = CODGEO.str[:2].value_counts().rename_axis('DEP').reset_index(name='Nb_ROW_per_DEP')\n",
    "    X_test_CODGEO_SUMDEP = X_test_real_val_pred_val[\"CODGEO\"].str[:2].value_counts().rename_axis('X_DEP').reset_index(name='X_Nb_Error_per_DEP')\n",
    "    X_test_CODGEO_SUMDEP = X_test_CODGEO_SUMDEP.merge(CODGEO_SUMDEP, how='left', left_on='X_DEP', right_on='DEP', right_index=False)\n",
    "    del X_test_CODGEO_SUMDEP[\"DEP\"]\n",
    "    X_test_CODGEO_SUMDEP[\"Error_ratio\"] = X_test_CODGEO_SUMDEP[\"X_Nb_Error_per_DEP\"]/X_test_CODGEO_SUMDEP[\"Nb_ROW_per_DEP\"]\n",
    "    return X_test_CODGEO_SUMDEP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1071,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False Negatives\n",
      "570\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X_DEP</th>\n",
       "      <th>X_Nb_Error_per_DEP</th>\n",
       "      <th>Nb_ROW_per_DEP</th>\n",
       "      <th>Error_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>36</td>\n",
       "      <td>8</td>\n",
       "      <td>49</td>\n",
       "      <td>0.163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>49</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>02</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>85</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>26</td>\n",
       "      <td>0.115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2B</td>\n",
       "      <td>15</td>\n",
       "      <td>131</td>\n",
       "      <td>0.115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>25</td>\n",
       "      <td>7</td>\n",
       "      <td>62</td>\n",
       "      <td>0.113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>09</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>82</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94</td>\n",
       "      <td>25</td>\n",
       "      <td>277</td>\n",
       "      <td>0.090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>54</td>\n",
       "      <td>12</td>\n",
       "      <td>134</td>\n",
       "      <td>0.090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>57</td>\n",
       "      <td>9</td>\n",
       "      <td>107</td>\n",
       "      <td>0.084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>17</td>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>0.083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0.083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>29</td>\n",
       "      <td>8</td>\n",
       "      <td>98</td>\n",
       "      <td>0.082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>68</td>\n",
       "      <td>10</td>\n",
       "      <td>126</td>\n",
       "      <td>0.079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>44</td>\n",
       "      <td>5</td>\n",
       "      <td>63</td>\n",
       "      <td>0.079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2A</td>\n",
       "      <td>9</td>\n",
       "      <td>118</td>\n",
       "      <td>0.076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>64</td>\n",
       "      <td>23</td>\n",
       "      <td>316</td>\n",
       "      <td>0.073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>84</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>0.069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>34</td>\n",
       "      <td>22</td>\n",
       "      <td>320</td>\n",
       "      <td>0.069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>35</td>\n",
       "      <td>9</td>\n",
       "      <td>131</td>\n",
       "      <td>0.069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>73</td>\n",
       "      <td>8</td>\n",
       "      <td>119</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>92</td>\n",
       "      <td>29</td>\n",
       "      <td>432</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>31</td>\n",
       "      <td>14</td>\n",
       "      <td>209</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>0.067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>62</td>\n",
       "      <td>0.065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>26</td>\n",
       "      <td>9</td>\n",
       "      <td>140</td>\n",
       "      <td>0.064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>06</td>\n",
       "      <td>74</td>\n",
       "      <td>1334</td>\n",
       "      <td>0.055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "      <td>236</td>\n",
       "      <td>0.055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>148</td>\n",
       "      <td>0.054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>91</td>\n",
       "      <td>7</td>\n",
       "      <td>138</td>\n",
       "      <td>0.051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>42</td>\n",
       "      <td>12</td>\n",
       "      <td>243</td>\n",
       "      <td>0.049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>38</td>\n",
       "      <td>19</td>\n",
       "      <td>393</td>\n",
       "      <td>0.048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>0.048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>0.048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>66</td>\n",
       "      <td>7</td>\n",
       "      <td>149</td>\n",
       "      <td>0.047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>58</td>\n",
       "      <td>2</td>\n",
       "      <td>43</td>\n",
       "      <td>0.047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>76</td>\n",
       "      <td>5</td>\n",
       "      <td>109</td>\n",
       "      <td>0.046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>3</td>\n",
       "      <td>66</td>\n",
       "      <td>0.045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>77</td>\n",
       "      <td>6</td>\n",
       "      <td>135</td>\n",
       "      <td>0.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "      <td>45</td>\n",
       "      <td>0.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>78</td>\n",
       "      <td>7</td>\n",
       "      <td>158</td>\n",
       "      <td>0.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>0.043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>05</td>\n",
       "      <td>4</td>\n",
       "      <td>95</td>\n",
       "      <td>0.042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>33</td>\n",
       "      <td>12</td>\n",
       "      <td>289</td>\n",
       "      <td>0.042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "      <td>49</td>\n",
       "      <td>0.041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>86</td>\n",
       "      <td>4</td>\n",
       "      <td>100</td>\n",
       "      <td>0.040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>95</td>\n",
       "      <td>4</td>\n",
       "      <td>103</td>\n",
       "      <td>0.039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>62</td>\n",
       "      <td>7</td>\n",
       "      <td>194</td>\n",
       "      <td>0.036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>07</td>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>0.036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>74</td>\n",
       "      <td>10</td>\n",
       "      <td>329</td>\n",
       "      <td>0.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>69</td>\n",
       "      <td>3</td>\n",
       "      <td>100</td>\n",
       "      <td>0.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>90</td>\n",
       "      <td>2</td>\n",
       "      <td>70</td>\n",
       "      <td>0.029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>67</td>\n",
       "      <td>3</td>\n",
       "      <td>117</td>\n",
       "      <td>0.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>59</td>\n",
       "      <td>6</td>\n",
       "      <td>235</td>\n",
       "      <td>0.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>87</td>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "      <td>0.024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>104</td>\n",
       "      <td>0.019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>68 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   X_DEP  X_Nb_Error_per_DEP  Nb_ROW_per_DEP  Error_ratio\n",
       "24    36                   8              49        0.163\n",
       "51    49                   2              14        0.143\n",
       "56    55                   1               7        0.143\n",
       "58    02                   1               7        0.143\n",
       "67    85                   1               7        0.143\n",
       "43    45                   3              26        0.115\n",
       "8     2B                  15             131        0.115\n",
       "29    25                   7              62        0.113\n",
       "57    28                   1               9        0.111\n",
       "66    09                   1               9        0.111\n",
       "61    82                   1              10        0.100\n",
       "4     94                  25             277        0.090\n",
       "11    54                  12             134        0.090\n",
       "18    57                   9             107        0.084\n",
       "36    17                   5              60        0.083\n",
       "62    61                   1              12        0.083\n",
       "26    29                   8              98        0.082\n",
       "17    68                  10             126        0.079\n",
       "35    44                   5              63        0.079\n",
       "20    2A                   9             118        0.076\n",
       "5     64                  23             316        0.073\n",
       "41    84                   4              58        0.069\n",
       "6     34                  22             320        0.069\n",
       "19    35                   9             131        0.069\n",
       "25    73                   8             119        0.067\n",
       "2     92                  29             432        0.067\n",
       "9     31                  14             209        0.067\n",
       "63    37                   1              15        0.067\n",
       "40    10                   4              62        0.065\n",
       "21    26                   9             140        0.064\n",
       "..   ...                 ...             ...          ...\n",
       "0     06                  74            1334        0.055\n",
       "10    21                  13             236        0.055\n",
       "22    14                   8             148        0.054\n",
       "27    91                   7             138        0.051\n",
       "13    42                  12             243        0.049\n",
       "7     38                  19             393        0.048\n",
       "59    71                   1              21        0.048\n",
       "60    46                   1              21        0.048\n",
       "30    66                   7             149        0.047\n",
       "50    58                   2              43        0.047\n",
       "34    76                   5             109        0.046\n",
       "42    43                   3              66        0.045\n",
       "32    77                   6             135        0.044\n",
       "47    56                   2              45        0.044\n",
       "28    78                   7             158        0.044\n",
       "54    15                   1              23        0.043\n",
       "38    05                   4              95        0.042\n",
       "14    33                  12             289        0.042\n",
       "46    27                   2              49        0.041\n",
       "37    86                   4             100        0.040\n",
       "39    95                   4             103        0.039\n",
       "31    62                   7             194        0.036\n",
       "53    07                   1              28        0.036\n",
       "16    74                  10             329        0.030\n",
       "45    69                   3             100        0.030\n",
       "49    90                   2              70        0.029\n",
       "44    67                   3             117        0.026\n",
       "33    59                   6             235        0.026\n",
       "55    87                   1              42        0.024\n",
       "48    51                   2             104        0.019\n",
       "\n",
       "[68 rows x 4 columns]"
      ]
     },
     "execution_count": 1071,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Analyze error related to False negatives\n",
    "X_test_CODGEO_SUMDEP = analyze_pred_real_values(xgb_clf2_pred_proba, pred_value=0, real_value=1)\n",
    "print(\"False Negatives\")\n",
    "print(X_test_CODGEO_SUMDEP[\"X_Nb_Error_per_DEP\"].sum())\n",
    "X_test_CODGEO_SUMDEP.sort_values(['Error_ratio', 'Nb_ROW_per_DEP'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1072,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False Negatives\n",
      "87\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\query\\Anaconda3_New\\lib\\site-packages\\ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X_DEP</th>\n",
       "      <th>X_Nb_Error_per_DEP</th>\n",
       "      <th>Nb_ROW_per_DEP</th>\n",
       "      <th>Error_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>0.038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>0.029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>06</td>\n",
       "      <td>29</td>\n",
       "      <td>1334</td>\n",
       "      <td>0.022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>26</td>\n",
       "      <td>3</td>\n",
       "      <td>140</td>\n",
       "      <td>0.021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>86</td>\n",
       "      <td>2</td>\n",
       "      <td>100</td>\n",
       "      <td>0.020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>78</td>\n",
       "      <td>3</td>\n",
       "      <td>158</td>\n",
       "      <td>0.019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>84</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>0.017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2A</td>\n",
       "      <td>2</td>\n",
       "      <td>118</td>\n",
       "      <td>0.017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>0.017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>68</td>\n",
       "      <td>2</td>\n",
       "      <td>126</td>\n",
       "      <td>0.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>92</td>\n",
       "      <td>6</td>\n",
       "      <td>432</td>\n",
       "      <td>0.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>148</td>\n",
       "      <td>0.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>66</td>\n",
       "      <td>2</td>\n",
       "      <td>149</td>\n",
       "      <td>0.013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>427</td>\n",
       "      <td>0.012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>63</td>\n",
       "      <td>2</td>\n",
       "      <td>214</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>57</td>\n",
       "      <td>1</td>\n",
       "      <td>107</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>74</td>\n",
       "      <td>3</td>\n",
       "      <td>329</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>117</td>\n",
       "      <td>0.009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>83</td>\n",
       "      <td>4</td>\n",
       "      <td>503</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>38</td>\n",
       "      <td>3</td>\n",
       "      <td>393</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>131</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>91</td>\n",
       "      <td>1</td>\n",
       "      <td>138</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>94</td>\n",
       "      <td>2</td>\n",
       "      <td>277</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>289</td>\n",
       "      <td>0.007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>320</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>93</td>\n",
       "      <td>1</td>\n",
       "      <td>174</td>\n",
       "      <td>0.006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>194</td>\n",
       "      <td>0.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>59</td>\n",
       "      <td>1</td>\n",
       "      <td>235</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>243</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>64</td>\n",
       "      <td>1</td>\n",
       "      <td>316</td>\n",
       "      <td>0.003</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X_DEP  X_Nb_Error_per_DEP  Nb_ROW_per_DEP  Error_ratio\n",
       "22    45                   1              26        0.038\n",
       "23    40                   1              35        0.029\n",
       "0     06                  29            1334        0.022\n",
       "7     26                   3             140        0.021\n",
       "8     86                   2             100        0.020\n",
       "4     78                   3             158        0.019\n",
       "28    84                   1              58        0.017\n",
       "9     2A                   2             118        0.017\n",
       "27    17                   1              60        0.017\n",
       "10    68                   2             126        0.016\n",
       "1     92                   6             432        0.014\n",
       "11    14                   2             148        0.014\n",
       "14    66                   2             149        0.013\n",
       "2     13                   5             427        0.012\n",
       "16    63                   2             214        0.009\n",
       "19    57                   1             107        0.009\n",
       "5     74                   3             329        0.009\n",
       "17    67                   1             117        0.009\n",
       "3     83                   4             503        0.008\n",
       "6     38                   3             393        0.008\n",
       "25    35                   1             131        0.008\n",
       "29    91                   1             138        0.007\n",
       "15    94                   2             277        0.007\n",
       "13    33                   2             289        0.007\n",
       "12    34                   2             320        0.006\n",
       "21    93                   1             174        0.006\n",
       "26    62                   1             194        0.005\n",
       "20    59                   1             235        0.004\n",
       "18    42                   1             243        0.004\n",
       "24    64                   1             316        0.003"
      ]
     },
     "execution_count": 1072,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Analyze error related to False Positives\n",
    "X_test_CODGEO_SUMDEP = analyze_pred_real_values(xgb_clf2_pred_proba, pred_value=1, real_value=0)\n",
    "print(\"False Negatives\")\n",
    "print(X_test_CODGEO_SUMDEP[\"X_Nb_Error_per_DEP\"].sum())\n",
    "X_test_CODGEO_SUMDEP.sort_values(['Error_ratio', 'Nb_ROW_per_DEP'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Benchmark description\n",
    "We launched a fast benchmark with a xgboost model and got a 0.41 NGC score. It is a basic model where all categorical variables are label encoded. Most important variables are superficief, ft_22_categ, EXPO.\n",
    "\n",
    "Parameters for xgboost were found by cross-validation.\n",
    "\n",
    "Metric\n",
    "The metric used for this challenge is the normalized gini coefficient.\n",
    "\n",
    "The goal of this challenge is to build a model that predicts claims order. A model is good if it detects with a higher probability buildings that actually had a claim.\n",
    "\n",
    "To calculate the metric, observations are ordered by decreasing predicted probability. Predictions are only used here to order observations. Thus the relative magnitude of predictions is not used with this scoring method.\n",
    "\n",
    "Kaggle challenge with the same metric: www.kaggle.com/c/porto-seguro-safe-driver-prediction"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "<script>\n",
    "  $(document).ready(function(){\n",
    "      $('div.prompt').hide();\n",
    "  });\n",
    "</script>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
